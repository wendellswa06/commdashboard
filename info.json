{
    'address': '38.140.133.234:8888',
    'functions': [
        'switch_network',
        'encode_topk',
        'ls_json',
        'pm2_logs_path_map',
        'update_user',
        'self_destruct',
        'dirpath',
        'config_exists',
        'update_namespace',
        'set_network',
        'resolve_tag',
        'refresh_tmp_dir',
        'ray_nodes',
        'datasets',
        'save_serve_kwargs',
        'type',
        'update_global',
        'module_exists',
        'get_kwargs',
        'gradio',
        'st',
        'path',
        'repo2module',
        'update',
        'unleash_gpus',
        'random_tmp_file_path',
        'ps',
        'get_file_size',
        'resports',
        'config',
        'remotewrap',
        'dead_servers',
        'add_text',
        'mv',
        'resolve_ssh_path',
        'submit_batch',
        'repo_url',
        'get_params',
        'root_key',
        'resolve_memory',
        'get_module_path',
        'key_info',
        'kill_port',
        'rm',
        'datetime2time',
        'load_state',
        'static_meethods',
        'load_config',
        'self_fns',
        'ray_put',
        'tmp_dir',
        'tokenizer',
        'get_module',
        'is_address',
        'wait',
        'random_words',
        'start_chain',
        'connect_pool',
        'get_fn_args',
        'ray_actor',
        'install_npm',
        'name2compose',
        'install_rust',
        'get_file_contents',
        'class_fns',
        'save_yaml',
        'refresh_storage',
        'models',
        'string',
        'unresports',
        'fn_args',
        'get_function_input_variables',
        'get_actor',
        'reset',
        'ray_tasks',
        'module_file',
        'remote_fn_fleet',
        'network',
        'register_servers',
        'ray_objects',
        'get_stake',
        'balance',
        'modules',
        'reserve_port',
        'get_module_python_paths',
        'ray_actor_map',
        'get_attributes',
        'get_self_methods',
        'available_ports',
        'kill_all',
        'm2p',
        'check_connection',
        'init_schema',
        'hardware',
        'get_text',
        'json2df',
        'key2stake',
        'start_telemetry',
        'thread',
        'key_info_map',
        'set_tag',
        'reserve_gpu_memory',
        'try_n_times',
        'get_methods',
        'datas',
        'pip_list',
        'tensor',
        'debug',
        'class_methods',
        'filepath2text',
        'setattr',
        'chown',
        'isfile',
        'color',
        'filter',
        'get_yaml',
        'root_addys',
        'nodes',
        'torch',
        'flatten_dict',
        'get_functions',
        'ensure_env',
        'my_balances',
        'server_restart',
        'generate',
        'function2streamlit',
        'total_tokens',
        'model_shortcuts',
        'reverse_map',
        'make_dir',
        'max_gpu_memory',
        'server_exists',
        'my_tokens',
        'stake_many',
        'load_serve_kwargs',
        'kill_chain',
        'pm2_restart_all',
        'port_range',
        'admins',
        'random_int',
        'dict_put',
        'get_network',
        'find_python_class',
        'get_keys',
        'get_key',
        'unstake_many',
        'watchdog',
        'bt',
        'getattr',
        'get_staketo',
        'put_namespace',
        'pm2_kill_all',
        'save_json',
        'get_function_args',
        'call_pool',
        'send_api_keys',
        'kill_port_range',
        'get_code_line',
        'cj',
        'async_check_connection',
        'users',
        'new_modules',
        'destroy',
        'ftree',
        'get_client',
        'minimal_config',
        'my_modules',
        'restart_many',
        'get_port_range',
        'market_cap',
        'train_fleet',
        'gpu_info',
        'chash',
        'restart_all',
        'put_json',
        'servers',
        'num_gpus',
        'retry',
        'run_jobs',
        'colours',
        'path2localpath',
        'date2time',
        'servefleet',
        'rpull',
        'str2bytes',
        'find_code_line',
        'namespace',
        'restart_peers',
        'as_completed',
        'cfgpath',
        'get_parent_functions',
        'get_used_ports',
        'random_peers',
        'restart_all_servers',
        'get_files_code',
        'version',
        'path2simple',
        'chunk',
        'get_public_key_from_file',
        'transfer_many',
        'format_data_size',
        'get_tensor_size',
        'transfer2roots',
        'add_node',
        'my_value',
        'remote_servers',
        'used_gpu_memory',
        'lock_file',
        'valid_ss58_address',
        'resolve_model',
        'pip_install',
        'rservers',
        'ensure_libs',
        'getmem',
        'get_class_name',
        'reged_servers',
        'stake',
        'resolve_port',
        'pm2_status',
        'root_balances',
        'kill_actor',
        'cmd',
        'play',
        'reg_servers',
        'rmc',
        'memory_info',
        'is_parent',
        'ray_import',
        'switch_key',
        'modulefn',
        'port2module',
        'install',
        'gpus',
        'stake_spread',
        'lspm2',
        'pm2_start',
        'get_config',
        'pm2_restart_prefix',
        'ask',
        'module_dirpath',
        'storage_dir',
        'simple2config_path',
        'get_port',
        'encrypt_path',
        'hash',
        'get_cache',
        'port_used',
        'resolve_model_shortcut',
        'pm2_launch',
        'decrypt',
        'ray_runtime_context',
        'json2proto',
        'mod',
        'generator',
        'all',
        'rfn',
        'check_miners',
        'params_size_map',
        'resolve_console',
        'module2fn2str',
        'actor_resources',
        'restart_servers',
        'pm2ls',
        'talk',
        'r',
        'ssh_key',
        'module_tree',
        'pip_exists',
        'get_trainable_params',
        'resport',
        'vote',
        'install_docker_gpus',
        'get_role',
        'start_node',
        'mine',
        'vstats',
        'port_available',
        'add_user',
        'test',
        'watch',
        'import_module',
        'restart_valis',
        'match_module_hash',
        'resolve_name',
        'my_stats',
        'stwrite',
        'find_classes',
        'module_config_tree',
        'addy',
        'locals2kwargs',
        'set_server_name',
        'get_namespace',
        'detailed_error',
        'docker_ps',
        'address2ip',
        'resolve_tag_path',
        'most_free_gpu',
        'fleet',
        'munch',
        'path_config_exists',
        'object_path',
        'error',
        'get_text_line',
        'registered_servers',
        'put_torch',
        'add_node_key',
        'dash',
        'module2docpath',
        'my_balance',
        'is_user',
        'valis',
        'is_module',
        'pypath',
        'new_module',
        'actors',
        'ray_context',
        'add_remote',
        'net',
        'classify_fn',
        'hello',
        'logs',
        'put_text',
        'serializer',
        'server2info',
        'rm_json',
        'walk',
        'str2python',
        'key2address',
        'functions',
        'ls',
        'rm_keys',
        'has_fn',
        'update_network',
        'update_subnet',
        'module_fn',
        'total_supply',
        'get_static_methods',
        'path2config',
        'get_json',
        'chown_cache',
        'is_root_key',
        'resolve_ip',
        'sign',
        'root_address',
        'add_api_keys',
        'get_function_signature_map',
        'find_lines',
        'async_connect',
        'network2namespace',
        'module_name',
        'is_key',
        'logmap',
        'dashboard',
        'pm2_logs',
        'restart_server',
        'round',
        'available_modules',
        'libs',
        'get_api_key',
        'pm2list',
        'memory_usage',
        'readme',
        'address2key',
        'delta_t',
        'key_stats',
        'infer_device_map',
        'get_actor_id',
        'dlogs',
        'default_config',
        'mems',
        'deregister_server',
        'pm2_kill',
        'most_free_gpu_memory',
        'is_admin',
        'init_nn',
        'empty_namespace',
        'ray_actors',
        'encrypt_key',
        'kill_all_servers',
        'add_peers',
        'save',
        'sidebar',
        'scan_ports',
        'datetime',
        'add_shortcut',
        'keys',
        'api_keys',
        'wait_for_server',
        'random_colour',
        'scan',
        'importobj',
        'link_cmd',
        'get_function_signature',
        'fncode',
        'to_dict',
        'type_str',
        'try_fn_n_times',
        'has_module',
        'node_keys',
        'rm_model_shortcut',
        'attributes',
        'pm2_rm_logs',
        'pm2_exists',
        'jsonable',
        'self_restart',
        'get_model_size',
        'is_root_module',
        'module2connection',
        'add_key',
        'init',
        'resolve_address',
        'path2config_path',
        'update_loop',
        'too_old',
        'containers',
        'cp',
        'select_network',
        'emoji',
        'timer',
        'resolve_key_address',
        'threads',
        'time2datetime',
        'add_namespace',
        'params_map',
        'get_module_dir',
        'launchpad',
        'hasc',
        'free_gpu_memory',
        'from_json',
        'bytes2str',
        'python',
        'file_exists',
        'select_key',
        'object_module_path',
        'resolve_logger',
        'remove_user',
        'run_python',
        'register',
        'model_max_gpus',
        'get_address',
        'shuffle',
        'miners',
        'dict_delete',
        'save_keys',
        'ray_get',
        'colour',
        'is_module_root',
        'readlines',
        'register_server',
        'get_torch',
        'fn2hash',
        'is_valid_ss58_address',
        'model_menu',
        'random_peer',
        'is_generator',
        'rm_many',
        'timestamp',
        'get_env',
        'add_server',
        'round_decimals',
        'idcard',
        'unresport',
        'batch',
        'get_available_port',
        'simple2config',
        'decrypt_path',
        'setattributes',
        'external_ip',
        'call',
        'add_model_shortcut',
        'fn',
        'critical',
        'class_name',
        'import_object',
        'model_options',
        'ss58_decode',
        'check_valis',
        'path2object',
        'serialize',
        'has_gpus',
        'is_property',
        'key2balance',
        'randcolor',
        'is_success',
        'random_port',
        'is_encrypted_path',
        'address2module',
        'serve',
        'get_shortcut',
        'process',
        'resolve_port_range',
        'module_path',
        'fn_info',
        'check_servers',
        'auth',
        'help',
        'add_admin',
        'free_address',
        'kill_prefix',
        'ray_namespace',
        'get_sample_schema',
        'key2tokens',
        'has_free_ports',
        'restart_replicas',
        'stside',
        'tqdm',
        'key_exists',
        'is_private_key',
        'learn',
        'compose',
        'name2address',
        'list_modules',
        'setc',
        'user_exists',
        'start',
        'sandbox',
        'random_ratio_selection',
        'static_fns',
        'exists',
        'mv_key',
        'shell',
        'refresh',
        'my_staketo',
        'sync',
        'valid_module',
        'get_tags',
        'free_port',
        'from_dict',
        'pd',
        'detokenize',
        'load_yaml',
        'add_tree',
        'pycode',
        'mem',
        'pm2_ls',
        'used_ports',
        'import_path',
        'rm_all',
        'lsdir',
        'fn_code',
        'resolve_keypath',
        'join_threads',
        'mkdir',
        'add_root_keys',
        'dead_keys',
        'ip_to_int',
        'unreserve_gpu_memory',
        'get_key_for_address',
        'actor_exists',
        'loop_fleet',
        'ensure_lib',
        'sample',
        'rename_key',
        'dict_rm',
        'create_key',
        'model_gpus',
        'unstake_all',
        'choice',
        'sid',
        'chmod_scripts',
        'reg',
        'connect',
        'argparse',
        'has_config',
        'get_model_device',
        'unreserve_gpus',
        'get_annotations',
        'client',
        'echo',
        'deserialize',
        'jupyter',
        'random_color',
        'merge',
        'start_local_node',
        'init_kwargs',
        'peers',
        'isdir',
        'load_text',
        'add_keys',
        'reserved_ports',
        'ray_wait',
        'tostr',
        'simple2path',
        'time2date',
        'run_generator',
        'resnet',
        'reserve_gpus',
        'check_response',
        'rand_tag',
        'actor_map',
        'init_empty_weights',
        'update_module',
        'is_fn_allowed',
        'unregistered_servers',
        'is_root',
        'subnets',
        'push',
        'fn_schema',
        'put_yaml',
        'hasfn',
        'getclassattr',
        'resolve_key',
        'module2port',
        'load_keys',
        'colors',
        'rm_tree',
        'root_key_address',
        'dict2bytes',
        'dict_has',
        'check_module',
        'add_api_key',
        'keysc',
        'kill_self',
        'time',
        'rm_key',
        'resolve_server_name',
        'is_ss58',
        'images',
        'python2str',
        'set_api_key',
        'tilde_path',
        'ssh_pubkey',
        'ray_restart',
        'submit',
        'gather',
        'get_class_methods',
        'module',
        'loadmems',
        'get_event_loop',
        'docs',
        'has_serve_kwargs',
        'tags',
        'infos',
        'sleep',
        'rm_server',
        'is_error',
        'rmdir',
        'verify',
        'get_stakefrom',
        'proto2json',
        'set_api_keys',
        'fn2code',
        'build_image',
        'tree',
        'name2port',
        'ray_kill',
        'switchnet',
        'has_shortcut',
        'encrypt',
        'remote_fn',
        'remove_number_from_word',
        'get_shortcuts',
        'address_exists',
        'launch',
        'timestamp_to_iso',
        'root_key2address',
        'split_gather',
        'get_balance',
        'key2mem',
        'st_load_css',
        'get_function_default_map',
        'frontend',
        'self_vote',
        'block',
        'install_docker',
        'dict2munch',
        'install_pm2',
        'enable_jupyter',
        'tokenize',
        'my_stakefrom',
        'restart',
        'env',
        'key_encrypted',
        'build_spec',
        'bro',
        'has_readme',
        'my_keys',
        'success',
        'ls_pm2',
        'int_to_ip',
        'loops',
        'to_json',
        'upgrade_proto',
        'register_dead_keys',
        'popc',
        'port2name',
        'infer_gpus',
        'param_keys',
        'is_dir_empty',
        'cpu_count',
        'reserved_gpus',
        'refresh_users',
        'schema',
        'create_actor',
        'ensure_ray_context',
        'kill_replicas',
        'imp',
        'release_gpus',
        'generate_ssh_key_pair',
        'addresses',
        'savemems',
        'get_parents',
        'rm_shortcut',
        'kill_nodes',
        'n',
        'set_key',
        'parse_args',
        'load_json',
        'add_servers',
        'most_free_gpus',
        'dict2str',
        'self_methods',
        'get_user',
        'setnet',
        'readme_paths',
        'set_config',
        'lag',
        'munch2dict',
        'free_gpus',
        'is_encrypted',
        'gpu_total_map',
        'rm_namespace',
        'info',
        'resolve_class',
        'shortcuts',
        'resolve_device',
        'delete',
        'config_path',
        'port_free',
        'get_model_params',
        'cachefn',
        'task',
        'unreserve_ports',
        'determine_type',
        'resolve_module',
        'merge_dict',
        'x',
        'model_gpu_memory',
        'install_python',
        'executor',
        'rm_api_key',
        'filesize',
        'is_mnemonic',
        'cuda_available',
        'unreserve_port',
        'send',
        'transfer_fn_code',
        'async_get_json',
        'rm_api_keys',
        'print',
        'module_class',
        'obj_age',
        'wallets',
        'commit_hash',
        'code',
        'filepath',
        'new_event_loop',
        'glob',
        'ip',
        'my_stake',
        'ls_keys',
        'j',
        'jload',
        'name',
        'get_module_dirpath',
        'make_pull',
        'classify_fns',
        'property_fns',
        'put_cache',
        'generate_completions',
        'get_ray_context',
        'is_full_function',
        'set_env',
        'process_kwargs',
        'set_port_range',
        'get_signer',
        'python2types',
        'get_empty_model',
        'num_tokens',
        'delc',
        'loop',
        'add_ssh_key',
        'dict_get',
        'resolve_fn',
        'num_params',
        'makedirs',
        'kwargs2attributes',
        'kill_server',
        'random_float',
        'resolve_shortcut',
        'cache_path',
        'up',
        'resolve_path',
        '__init__',
        'run',
        'run_command',
        'pm2_restart',
        'check_used_ports',
        'update_self',
        'virtual_actor',
        'free_ports',
        'has_server',
        'resolve_network',
        'status',
        'unreged_servers',
        'resolve_password',
        'build_proto',
        'putc',
        'tasks',
        'live_keys',
        'dps',
        'copy',
        'pool',
        'networth',
        'gc',
        'key2stats',
        'get_many',
        'rm_user',
        'root_keys',
        'num_roles',
        'is_class',
        'ports',
        'merge_config',
        'get',
        'unlock_file',
        'm',
        'ray_stop',
        'snap',
        'randcolour',
        'subnet',
        'stats',
        'is_registered',
        'unstake',
        'put',
        'kill_many',
        'set_event_loop',
        'upgrade',
        'transfer',
        'log',
        'fn_defaults',
        'seconds_per_epoch',
        'get_mem',
        'is_number',
        'kill',
        'miner',
        'shortcut2model',
        'ssh_authorized_keys',
        'ensure_package',
        'rm_admin',
        'path2objectpath',
        'fns',
        'killpre',
        'subnet_params',
        'nest_asyncio',
        'gpu_map',
        'kill_fleet',
        'model_max_gpu_memory',
        'key2value',
        'has_function_arg',
        'timeit',
        'pythonpath',
        'async_put_json',
        'ray_start',
        'df',
        'lib2version',
        'get_num_params',
        'queue',
        'getc',
        'get_age',
        'readd_servers',
        'verify_idcard',
        'serve_module',
        'get_server_info',
        'random_peer_address',
        'pm2_list',
        'sand',
        'get_server_name',
        'virtual_client',
        'replicas',
        'ss58_encode',
        'argv',
        'sizeof',
        'restart_self',
        'cfg',
        'save_config',
        'set_shortcut',
        'async_call',
        'fix_proto',
        'get_available_ports',
        'warning',
        'random_word',
        'stake_multiple',
        'is_imported',
        'rcmd',
        'k2a',
        'get_function_annotations',
        'ray_init',
        'pull',
        'mcap',
        'add_args',
        'ip_version',
        'fn2str',
        'exists_json',
        'build',
        'load_key',
        'self_vote_pool',
        'get_fn',
        'get_object',
        'model_size',
        'regfleet',
        'get_schema',
        'total_gpu_memory',
        'dummy_gen',
        'pm2_kill_many',
        'getnet',
        'bytes2dict',
        'partial',
        'upnpc_create_port_map',
        'networks',
        'address2name'
    ],
    'attributes': ['config', 'kwargs'],
    'name': 'module',
    'path': 'module',
    'chash': 'eac8cd8f5457aa40a3baef676bad77ec4d1911a237bd02b70ee43a4460b1e717',
    'hash': '8c1d07bacd0331320f2b9cfd972d1e286f05753c823b2960ee6f8f20ccd5f230',
    'signature': 
'a04396c727294973cf16e9485ae3852ddc167290f00ad28c93ac5fafd41015097f54a487ae2c2795152b35
fd5f889038d0c1d4a98194d41a263ff80e481a438c',
    'ss58_address': '5GZBhMZZRMWCiqgqdDGZCGo16Kg5aUQUcpuUGWwSgHn9HbRC',
    'schema': {
        'switch_network': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'encode_topk': {
            'input': {'forward_response_tensor': 'torch.Tensor', 'topk': 'int'},
            'default': {'forward_response_tensor': None, 'topk': 4096},
            'output': 'torch.Tensor',
            'docs': None,
            'type': 'static'
        },
        'ls_json': {
            'input': {'path': 'str', 'recursive': 'bool'},
            'default': {'path': '', 'recursive': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_logs_path_map': {
            'input': {'name': 'NA'},
            'default': {'name': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_user': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'self_destruct': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'dirpath': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': '\n        removes the PWD with respect to where module.py is 
located\n        ',
            'type': 'cls'
        },
        'config_exists': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'bool',
            'docs': '\n        Returns true if the config exists\n        ',
            'type': 'self'
        },
        'update_namespace': {
            'input': {'network': 'str'},
            'default': {'network': 'local', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_network': {
            'input': {'network': 'str'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_tag': {
            'input': {'tag': 'str', 'default_tag': 'str'},
            'default': {'tag': None, 'default_tag': 'base'},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'refresh_tmp_dir': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_nodes': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'datasets': {
            'input': {},
            'default': {'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'save_serve_kwargs': {
            'input': {'server_name': 'str', 'kwargs': 'dict', 'network': 'str'},
            'default': {'server_name': None, 'kwargs': None, 'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'type': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_global': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_exists': {
            'input': {'module': 'str'},
            'default': {'module': None},
            'output': 'bool',
            'docs': '\n        Returns true if the module exists\n        ',
            'type': 'cls'
        },
        'get_kwargs': {
            'input': {
                'locals_dict': 'dict',
                'seperate_args': 'bool',
                'merge_kwargs': 'bool'
            },
            'default': {
                'locals_dict': None,
                'seperate_args': False,
                'merge_kwargs': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gradio': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'st': {
            'input': {
                'module': 'str',
                'public': 'bool',
                'remote': 'bool',
                'fn': 'str',
                'port': 'int',
                'kwargs': 'NA'
            },
            'default': {
                'module': None,
                'fn': 'dashboard',
                'port': 8501,
                'public': False,
                'remote': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path': {
            'input': {'simple': 'bool'},
            'default': {'simple': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'repo2module': {
            'input': {'repo': 'NA', 'module': 'NA'},
            'default': {'repo': None, 'module': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'update': {
            'input': {'network': 'str', 'module': 'NA'},
            'default': {'module': None, 'network': 'local', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unleash_gpus': {
            'input': {'gpu_memory': 'dict'},
            'default': {'gpu_memory': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_tmp_file_path': {
            'input': {'prefix': 'str'},
            'default': {'prefix': 'randomtempfile_utc'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ps': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_file_size': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resports': {
            'input': {'var_path': 'str'},
            'default': {'var_path': 'reserved_ports'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'config': {
            'input': {'config': 'dict', 'kwargs': 'dict', 'to_munch': 'bool'},
            'default': {'config': None, 'kwargs': None, 'to_munch': True},
            'output': {},
            'docs': '\n        Set the config as well as its local params\n        ',
            'type': 'cls'
        },
        'remotewrap': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': '\n        WARNNG IN PROGRSS, USE WITH CAUTION\n        ',
            'type': 'static'
        },
        'dead_servers': {
            'input': {'network': 'NA'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_text': {
            'input': {'path': 'str', 'text': 'str', 'root': 'bool'},
            'default': {'path': None, 'text': None, 'root': False},
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'mv': {
            'input': {'path1': 'NA', 'path2': 'NA'},
            'default': {'path1': None, 'path2': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_ssh_path': {
            'input': {'ssh_path': 'NA'},
            'default': {'ssh_path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'submit_batch': {
            'input': {
                'fn': 'str',
                'batch_kwargs': 'list[typing',
                'return_future': 'bool',
                'timeout': 'int',
                'module': 'NA'
            },
            'default': {
                'fn': None,
                'batch_kwargs': None,
                'return_future': False,
                'timeout': 10,
                'module': None,
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'repo_url': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_params': {
            'input': {
                'locals_dict': 'dict',
                'seperate_args': 'bool',
                'merge_kwargs': 'bool'
            },
            'default': {
                'locals_dict': None,
                'seperate_args': False,
                'merge_kwargs': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'root_key': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_memory': {
            'input': {'memory': 'union[str, int, float]'},
            'default': {'memory': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'get_module_path': {
            'input': {'simple': 'bool', 'obj': 'NA'},
            'default': {'obj': None, 'simple': False},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'key_info': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_port': {
            'input': {'port': 'int', 'mode': 'str'},
            'default': {'port': None, 'mode': 'bash'},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'rm': {
            'input': {'root': 'bool', 'mode': 'str', 'path': 'NA', 'extension': 'NA'},
            'default': {
                'path': None,
                'extension': None,
                'root': False,
                'mode': 'json'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'datetime2time': {
            'input': {'x': 'str'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_state': {
            'input': {
                'update': 'bool',
                'netuid': 'int',
                'network': 'str',
                'state': 'NA',
                '_self': 'NA'
            },
            'default': {
                'update': False,
                'netuid': 0,
                'network': 'main',
                'state': None,
                '_self': None
            },
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'static_meethods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'load_config': {
            'input': {'path': 'str', 'to_munch': 'bool', 'root': 'bool'},
            'default': {'path': None, 'to_munch': False, 'root': False},
            'output': 'union[munch',
            'docs': '\n        Args:\n            path: The path to the config file\n  
to_munch: If true, then convert the config to a munch\n        ',
            'type': 'cls'
        },
        'self_fns': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'ray_put': {
            'input': {},
            'default': {'items': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tmp_dir': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tokenizer': {
            'input': {'tokenizer': 'str', 'cache': 'bool'},
            'default': {'tokenizer': 'gpt2', 'cache': True, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_module': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'is_address': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'wait': {
            'input': {
                'futures': 'list',
                'timeout': 'int',
                'generator': 'bool',
                'return_dict': 'bool'
            },
            'default': {
                'futures': None,
                'timeout': None,
                'generator': False,
                'return_dict': True
            },
            'output': 'list',
            'docs': None,
            'type': 'static'
        },
        'random_words': {
            'input': {'n': 'int'},
            'default': {'n': 2, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'start_chain': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'connect_pool': {
            'input': {'return_dict': 'bool', 'modules': 'NA'},
            'default': {
                'modules': None,
                'args': None,
                'return_dict': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_fn_args': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_actor': {
            'input': {'actor_name': 'str', 'virtual': 'bool'},
            'default': {'actor_name': None, 'virtual': True},
            'output': {},
            'docs': '\n        Gets the ray actor\n        ',
            'type': 'cls'
        },
        'install_npm': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'name2compose': {
            'input': {},
            'default': {'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'install_rust': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_file_contents': {
            'input': {'class_name': 'NA'},
            'default': {'class_name': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'class_fns': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'save_yaml': {
            'input': {'path': 'str', 'data': 'dict', 'root': 'bool'},
            'default': {'path': None, 'data': None, 'root': False},
            'output': 'dict',
            'docs': '\n        Loads a yaml file\n        ',
            'type': 'cls'
        },
        'refresh_storage': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'models': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'string': {
            'input': {'input': 'NA'},
            'default': {'input': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unresports': {
            'input': {'verbose': 'bool', 'root': 'bool', 'var_path': 'str'},
            'default': {
                'ports': None,
                'var_path': 'reserved_ports',
                'verbose': True,
                'root': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn_args': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_function_input_variables': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': 'dict',
            'docs': None,
            'type': 'static'
        },
        'get_actor': {
            'input': {'actor_name': 'str', 'virtual': 'bool'},
            'default': {'actor_name': None, 'virtual': True},
            'output': {},
            'docs': '\n        Gets the ray actor\n        ',
            'type': 'cls'
        },
        'reset': {
            'input': {
                'name': 'str',
                'mode': 'str',
                'verbose': 'bool',
                'prefix_match': 'bool'
            },
            'default': {
                'name': None,
                'mode': 'pm2',
                'verbose': False,
                'prefix_match': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_tasks': {
            'input': {'running': 'bool', 'name': 'NA'},
            'default': {'running': False, 'name': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_file': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'remote_fn_fleet': {
            'input': {'fn': 'str', 'n': 'int'},
            'default': {'fn': None, 'n': 2, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'network': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'register_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_objects': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_stake': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'balance': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'modules': {
            'input': {'search': 'NA'},
            'default': {'search': None},
            'output': 'list[str]',
            'docs': '\n        List of module paths with respect to module.py file\n   
\n        Assumes the module root directory is the directory containing module.py\n    
',
            'type': 'cls'
        },
        'reserve_port': {
            'input': {'port': 'int', 'var_path': 'str', 'root': 'bool'},
            'default': {'port': None, 'var_path': 'reserved_ports', 'root': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_module_python_paths': {
            'input': {},
            'default': {},
            'output': 'list[str]',
            'docs': '\n        Search for all of the modules with yaml files. Format of
the file\n        ',
            'type': 'cls'
        },
        'ray_actor_map': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_attributes': {
            'input': {'search': 'NA', 'obj': 'NA'},
            'default': {'search': None, 'obj': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_self_methods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'available_ports': {
            'input': {'port_range': 'list[int]', 'ip': 'str'},
            'default': {'port_range': None, 'ip': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_all': {
            'input': {'network': 'str'},
            'default': {'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'm2p': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_connection': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'init_schema': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'hardware': {
            'input': {'fmt': 'str'},
            'default': {'fmt': 'gb', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_text': {
            'input': {
                'path': 'str',
                'start_byte': 'int',
                'end_byte': 'int',
                'start_line': 'int',
                'end_line': 'int',
                'tail': 'NA'
            },
            'default': {
                'path': None,
                'tail': None,
                'start_byte': 0,
                'end_byte': 0,
                'start_line': None,
                'end_line': None
            },
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'json2df': {
            'input': {'json_data': 'NA'},
            'default': {'json_data': None},
            'output': {},
            'docs': '\n        Convert JSON data to a pandas DataFrame.\n        \n    
Args:\n            json_data (str): JSON data representing a DataFrame.\n            \n
Returns:\n            pandas.DataFrame: DataFrame created from the JSON data.\n        
',
            'type': 'static'
        },
        'key2stake': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'start_telemetry': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'thread': {
            'input': {
                'fn': "union[forwardref('callable'), str]",
                'args': 'list',
                'kwargs': 'dict',
                'daemon': 'bool',
                'start': 'bool',
                'tag_seperator': 'str',
                'tag': 'NA'
            },
            'default': {
                'fn': None,
                'args': None,
                'kwargs': None,
                'daemon': True,
                'tag': None,
                'start': True,
                'tag_seperator': ':'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'key_info_map': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_tag': {
            'input': {'tag': 'str', 'default_tag': 'str'},
            'default': {'tag': None, 'default_tag': 'base'},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'reserve_gpu_memory': {
            'input': {
                'gpu_memory': 'union[typing',
                'refresh': 'bool',
                'root': 'bool'
            },
            'default': {
                'gpu_memory': None,
                'refresh': False,
                'root': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'try_n_times': {
            'input': {
                'max_trials': 'int',
                'args': 'list',
                'kwargs': 'dict',
                'fn': 'NA'
            },
            'default': {'fn': None, 'max_trials': 10, 'args': [], 'kwargs': {}},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_methods': {
            'input': {'obj': 'type', 'modes': 'union[str, typing'},
            'default': {'obj': None, 'modes': 'all'},
            'output': 'list[str]',
            'docs': '\n        \n        Get methods of the obj, which defaults to the 
class object if None\n        \n        Args:\n            obj (object): object to get 
methods from\n            modes:\n        \n        ',
            'type': 'cls'
        },
        'datas': {
            'input': {},
            'default': {'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pip_list': {
            'input': {'lib': 'NA'},
            'default': {'lib': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tensor': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'debug': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'class_methods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'filepath2text': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'setattr': {
            'input': {'k': 'NA', 'v': 'NA'},
            'default': {'k': None, 'v': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'chown': {
            'input': {'path': 'str', 'sudo': 'bool'},
            'default': {'path': None, 'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'isfile': {
            'input': {'root': 'bool', 'path': 'NA'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'color': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'filter': {
            'input': {'text_list': 'list[str]', 'filter_text': 'str'},
            'default': {'text_list': None, 'filter_text': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'get_yaml': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': 'f\n        Loads a yaml file\n        ',
            'type': 'cls'
        },
        'root_addys': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'nodes': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'torch': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'flatten_dict': {
            'input': {'x': 'dict'},
            'default': {'x': {'a': {'b': 1, 'c': {'d': 2, 'e': 3}, 'f': 4}}},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_functions': {
            'input': {
                'obj': 'any',
                'include_parents': 'bool',
                'include_hidden': 'bool'
            },
            'default': {
                'obj': None,
                'include_parents': False,
                'include_hidden': False
            },
            'output': 'list[str]',
            'docs': '\n        Get a list of functions in a class\n        \n        
Args;\n            obj: the class to get the functions from\n            
include_parents: whether to include the parent functions\n            include_hidden: 
whether to include hidden functions (starts and begins with "__")\n        ',
            'type': 'cls'
        },
        'ensure_env': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_balances': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'server_restart': {
            'input': {'module': 'str'},
            'default': {'module': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'generate': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'function2streamlit': {
            'input': {
                'fn': 'str',
                'extra_defaults': 'dict',
                'cols': 'list',
                'skip_keys': 'list',
                'mode': 'str',
                'module': 'NA',
                'fn_schema': 'NA',
                'salt': 'NA'
            },
            'default': {
                'module': None,
                'fn': '__init__',
                'fn_schema': None,
                'extra_defaults': None,
                'cols': None,
                'skip_keys': ['self', 'cls'],
                'salt': None,
                'mode': 'pm2'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'total_tokens': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'model_shortcuts': {
            'input': {},
            'default': {'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reverse_map': {
            'input': {'x': 'dict'},
            'default': {'x': None},
            'output': 'dict',
            'docs': '\n        reverse a dictionary\n        ',
            'type': 'static'
        },
        'make_dir': {
            'input': {'exist_ok': 'bool', 'path': 'str'},
            'default': {'path': 'bro', 'exist_ok': True},
            'output': {},
            'docs': ' Makes directories for path.\n        ',
            'type': 'cls'
        },
        'max_gpu_memory': {
            'input': {
                'memory': 'union[str, int]',
                'mode': 'str',
                'reserve': 'bool',
                'free_gpu_memory': 'dict',
                'saturate': 'bool',
                'fmt': 'str',
                'decimals': 'int',
                'min_memory_ratio': 'float',
                'buffer_memory': 'str'
            },
            'default': {
                'memory': None,
                'mode': 'most_free',
                'min_memory_ratio': 0.0,
                'reserve': False,
                'buffer_memory': '5gb',
                'free_gpu_memory': None,
                'saturate': False,
                'fmt': 'b',
                'decimals': 3,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'server_exists': {
            'input': {'name': 'str', 'network': 'str', 'prefix_match': 'bool'},
            'default': {
                'name': None,
                'network': 'local',
                'prefix_match': False,
                'kwargs': None
            },
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'my_tokens': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'stake_many': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_serve_kwargs': {
            'input': {'server_name': 'str', 'network': 'str'},
            'default': {'server_name': None, 'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_chain': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_restart_all': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        Kill the server by the name\n        ',
            'type': 'cls'
        },
        'port_range': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'admins': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_int': {
            'input': {},
            'default': {'args': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'dict_put': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_network': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'find_python_class': {
            'input': {
                'path': 'str',
                'class_index': 'int',
                'search': 'str',
                'start_lines': 'int'
            },
            'default': {
                'path': None,
                'class_index': 0,
                'search': None,
                'start_lines': 2000
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_key': {
            'input': {'key': 'str', 'mode': 'str'},
            'default': {'key': None, 'mode': 'commune', 'kwargs': None},
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'unstake_many': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'watchdog': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'bt': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'getattr': {
            'input': {'k': 'str'},
            'default': {'k': None},
            'output': 'any',
            'docs': None,
            'type': 'self'
        },
        'get_staketo': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'put_namespace': {
            'input': {'network': 'str', 'namespace': 'dict'},
            'default': {'network': None, 'namespace': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_kill_all': {
            'input': {'verbose': 'bool', 'timeout': 'int'},
            'default': {'verbose': True, 'timeout': 10},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'save_json': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_function_args': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'call_pool': {
            'input': {
                'fn': 'str',
                'network': 'str',
                'timeout': 'int',
                'modules': 'NA'
            },
            'default': {
                'modules': None,
                'fn': 'info',
                'args': None,
                'network': 'local',
                'timeout': 10,
                'n': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'send_api_keys': {
            'input': {'module': 'str', 'network': 'str'},
            'default': {'module': None, 'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_port_range': {
            'input': {'start_port': 'int', 'end_port': 'int', 'timeout': 'int'},
            'default': {'start_port': 8501, 'end_port': 8600, 'timeout': 5},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_code_line': {
            'input': {'idx': 'int', 'code': 'str'},
            'default': {'idx': 0, 'code': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'cj': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'async_check_connection': {
            'input': {'timeout': 'int', 'module': 'NA'},
            'default': {'module': None, 'timeout': 5, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'users': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'new_modules': {
            'input': {},
            'default': {'modules': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'destroy': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'ftree': {
            'input': {'path': 'str', 'module': 'str'},
            'default': {'path': None, 'module': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_client': {
            'input': {'ip': 'str', 'port': 'int', 'virtual': 'bool', 'mode': 'str'},
            'default': {
                'ip': None,
                'port': None,
                'virtual': True,
                'mode': 'http',
                'kwargs': None
            },
            'output': {},
            'docs': '\n        Returns a client to a server\n        ',
            'type': 'cls'
        },
        'minimal_config': {
            'input': {},
            'default': {},
            'output': 'dict',
            'docs': '\n        The miminal config a module can be\n        ',
            'type': 'cls'
        },
        'my_modules': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart_many': {
            'input': {'search': 'str', 'network': 'NA'},
            'default': {'search': None, 'network': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_port_range': {
            'input': {'port_range': 'list'},
            'default': {'port_range': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'market_cap': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'train_fleet': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gpu_info': {
            'input': {'device': 'int'},
            'default': {'device': None},
            'output': 'dict[str, typing',
            'docs': '\n        Get the gpu info for a given device\n        ',
            'type': 'cls'
        },
        'chash': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        The hash of the code, where the code is the code of the 
class (cls)\n        ',
            'type': 'cls'
        },
        'restart_all': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'put_json': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'num_gpus': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'retry': {
            'input': {'trials': 'int', 'verbose': 'bool', 'fn': 'NA'},
            'default': {'fn': None, 'trials': 3, 'verbose': True},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'run_jobs': {
            'input': {'jobs': 'list', 'mode': 'str'},
            'default': {'jobs': None, 'mode': 'asyncio', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'colours': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path2localpath': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'date2time': {
            'input': {'x': 'str'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'servefleet': {
            'input': {'tag': 'str', 'n': 'int', 'refresh': 'bool', 'module': 'NA'},
            'default': {
                'module': None,
                'tag': None,
                'n': 2,
                'refresh': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rpull': {
            'input': {'stash': 'bool', 'cwd': 'NA'},
            'default': {'stash': False, 'cwd': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'str2bytes': {
            'input': {'data': 'str', 'mode': 'str'},
            'default': {'data': None, 'mode': 'hex'},
            'output': 'bytes',
            'docs': None,
            'type': 'cls'
        },
        'find_code_line': {
            'input': {'search': 'str', 'code': 'str'},
            'default': {'search': None, 'code': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'namespace': {
            'input': {'search': 'str', 'network': 'str', 'update': 'bool'},
            'default': {
                'search': None,
                'network': 'local',
                'update': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart_peers': {
            'input': {'timeout': 'int'},
            'default': {'timeout': 20},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'as_completed': {
            'input': {'timeout': 'int', 'futures': 'NA'},
            'default': {'futures': None, 'timeout': 10, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'cfgpath': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': '\n        removes the PWD with respect to where module.py is 
located\n        ',
            'type': 'cls'
        },
        'get_parent_functions': {
            'input': {},
            'default': {},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'get_used_ports': {
            'input': {
                'ports': 'list[int]',
                'ip': 'str',
                'port_range': 'tuple[int, int]'
            },
            'default': {'ports': None, 'ip': '0.0.0.0', 'port_range': None},
            'output': {},
            'docs': '\n        Get availabel ports out of port range\n        \n       
Args:\n            ports: list of ports\n            ip: ip address\n        \n        
',
            'type': 'cls'
        },
        'random_peers': {
            'input': {'network': 'str', 'n': 'int', 'tag': 'NA'},
            'default': {'network': 'local', 'n': 2, 'tag': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart_all_servers': {
            'input': {'verbose': 'bool'},
            'default': {'verbose': True},
            'output': {},
            'docs': '\n        Kill all of the servers\n        ',
            'type': 'cls'
        },
        'get_files_code': {
            'input': {'directory': 'NA'},
            'default': {'directory': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'version': {
            'input': {'lib': 'str'},
            'default': {'lib': 'commune'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path2simple': {
            'input': {'path': 'str', 'compress': 'bool'},
            'default': {'path': None, 'compress': True},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'chunk': {
            'input': {'sequence': 'list', 'chunk_size': 'int', 'num_chunks': 'int'},
            'default': {
                'sequence': [0, 2, 3, 4, 5, 6, 67],
                'chunk_size': None,
                'num_chunks': None
            },
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_public_key_from_file': {
            'input': {'public_key_file': 'str'},
            'default': {'public_key_file': '~/.ssh/id_rsa.pub'},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'transfer_many': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'format_data_size': {
            'input': {'x': 'union[int, float]', 'fmt': 'str', 'prettify': 'bool'},
            'default': {'x': None, 'fmt': 'b', 'prettify': False},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_tensor_size': {
            'input': {'tensor': 'torch.Tensor', 'fmt': 'str'},
            'default': {'tensor': None, 'fmt': 'b'},
            'output': 'float',
            'docs': None,
            'type': 'cls'
        },
        'transfer2roots': {
            'input': {'amount': 'int', 'key': 'str', 'n': 'int'},
            'default': {'amount': 1, 'key': None, 'n': 10},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'add_node': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_value': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'remote_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'used_gpu_memory': {
            'input': {},
            'default': {},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'lock_file': {
            'input': {'f': 'NA'},
            'default': {'f': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'valid_ss58_address': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'resolve_model': {
            'input': {'model': 'NA'},
            'default': {'model': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pip_install': {
            'input': {'lib': 'str', 'upgrade': 'bool', 'verbose': 'str'},
            'default': {'lib': None, 'upgrade': True, 'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rservers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'ensure_libs': {
            'input': {'verbose': 'bool'},
            'default': {'libs': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'getmem': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_class_name': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'reged_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'stake': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_port': {
            'input': {'port': 'int'},
            'default': {'port': None},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'pm2_status': {
            'input': {'verbose': 'bool'},
            'default': {'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'root_balances': {
            'input': {'search': 'str'},
            'default': {'search': 'module'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_actor': {
            'input': {'verbose': 'bool', 'actor': 'NA'},
            'default': {'actor': None, 'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'cmd': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'play': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reg_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rmc': {
            'input': {'k': 'NA', 'password': 'NA'},
            'default': {'k': None, 'password': None},
            'output': 'munch.Munch',
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'memory_info': {
            'input': {'fmt': 'str'},
            'default': {'fmt': 'gb'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_parent': {
            'input': {'parent': 'NA'},
            'default': {'parent': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_import': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'switch_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'modulefn': {
            'input': {'module': 'NA', 'fn': 'NA'},
            'default': {'module': None, 'fn': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'port2module': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'install': {
            'input': {'lib': 'str', 'verbose': 'bool', 'upgrade': 'bool'},
            'default': {'lib': None, 'verbose': True, 'upgrade': True},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'gpus': {
            'input': {},
            'default': {},
            'output': 'list[int]',
            'docs': None,
            'type': 'cls'
        },
        'stake_spread': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'lspm2': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_start': {
            'input': {
                'path': 'str',
                'name': 'str',
                'cmd_kwargs': 'str',
                'refresh': 'bool',
                'verbose': 'bool',
                'force': 'bool',
                'interpreter': 'str'
            },
            'default': {
                'path': None,
                'name': None,
                'cmd_kwargs': None,
                'refresh': True,
                'verbose': True,
                'force': True,
                'interpreter': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_config': {
            'input': {'config': 'dict', 'kwargs': 'dict', 'to_munch': 'bool'},
            'default': {'config': None, 'kwargs': None, 'to_munch': True},
            'output': 'munch.Munch',
            'docs': '\n        Set the config as well as its local params\n        ',
            'type': 'cls'
        },
        'pm2_restart_prefix': {
            'input': {'name': 'str', 'verbose': 'bool'},
            'default': {'name': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ask': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_dirpath': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'self'
        },
        'storage_dir': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'simple2config_path': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_port': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'encrypt_path': {
            'input': {'path': 'str', 'prefix': 'str', 'key': 'NA'},
            'default': {'path': None, 'key': None, 'prefix': 'ENCRYPTED'},
            'output': 'str',
            'docs': '\n        Encrypts the path\n        ',
            'type': 'cls'
        },
        'hash': {
            'input': {'data': 'union[str, bytes]', 'mode': 'str'},
            'default': {'data': None, 'mode': 'sha256', 'kwargs': None},
            'output': 'bytes',
            'docs': None,
            'type': 'cls'
        },
        'get_cache': {
            'input': {'k': 'NA', 'default': 'NA'},
            'default': {'k': None, 'default': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'port_used': {
            'input': {'port': 'int', 'ip': 'str', 'timeout': 'int'},
            'default': {'port': None, 'ip': '0.0.0.0', 'timeout': 1},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_model_shortcut': {
            'input': {'model': 'NA'},
            'default': {'model': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_launch': {
            'input': {
                'module': 'str',
                'fn': 'str',
                'name': 'optional[str]',
                'tag': 'str',
                'args': 'list',
                'kwargs': 'dict',
                'device': 'str',
                'interpreter': 'str',
                'auto': 'bool',
                'verbose': 'bool',
                'force': 'bool',
                'meta_fn': 'str',
                'tag_seperator': 'str',
                'refresh': 'bool'
            },
            'default': {
                'module': None,
                'fn': 'serve',
                'name': None,
                'tag': None,
                'args': None,
                'kwargs': None,
                'device': None,
                'interpreter': 'python3',
                'auto': True,
                'verbose': False,
                'force': True,
                'meta_fn': 'module_fn',
                'tag_seperator': '::',
                'refresh': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'decrypt': {
            'input': {
                'data': 'union[str, bytes]',
                'key': 'str',
                'include_files': 'bool',
                'prefix': 'str',
                'path': 'NA'
            },
            'default': {
                'data': None,
                'key': None,
                'prefix': 'ENCRYPTED',
                'include_files': True,
                'path': None
            },
            'output': 'bytes',
            'docs': None,
            'type': 'cls'
        },
        'ray_runtime_context': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'json2proto': {
            'input': {'data': 'NA'},
            'default': {'data': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mod': {
            'input': {'module': 'any'},
            'default': {'module': 'module', 'kwargs': None},
            'output': {},
            'docs': '\n        Wraps a python class as a module\n        ',
            'type': 'cls'
        },
        'generator': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'all': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'rfn': {
            'input': {
                'fn': 'str',
                'module': 'str',
                'args': 'list',
                'kwargs': 'dict',
                'name': 'str',
                'tag': 'str',
                'refresh': 'bool',
                'tag_seperator': 'str'
            },
            'default': {
                'fn': 'train',
                'module': None,
                'args': None,
                'kwargs': None,
                'name': None,
                'tag': None,
                'refresh': True,
                'tag_seperator': '::',
                'extra_launch_kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_miners': {
            'input': {'module': 'str'},
            'default': {'args': None, 'module': 'bittensor', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'params_size_map': {
            'input': {
                'model': 'str',
                'block_prefix': 'str',
                'keys': 'list[str]',
                'fmt': 'str'
            },
            'default': {
                'model': None,
                'block_prefix': 'layers',
                'fmt': 'b',
                'keys': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_console': {
            'input': {'console': 'NA'},
            'default': {'console': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module2fn2str': {
            'input': {'code': 'bool', 'defaults': 'bool'},
            'default': {'code': True, 'defaults': False, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'actor_resources': {
            'input': {'actor': 'str'},
            'default': {'actor': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart_servers': {
            'input': {'module': 'str', 'mode': 'str'},
            'default': {'module': None, 'mode': 'server'},
            'output': {},
            'docs': '\n        Kill the server by the name\n        ',
            'type': 'cls'
        },
        'pm2ls': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'talk': {
            'input': {'module': 'str', 'num_jobs': 'int', 'timeout': 'int'},
            'default': {
                'args': None,
                'module': 'model',
                'num_jobs': 1,
                'timeout': 6,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'r': {
            'input': {
                'tag': 'str',
                'key': 'str',
                'stake': 'int',
                'subnet': 'str',
                'refresh': 'bool',
                'wait_for_server': 'bool',
                'module': 'NA',
                'address': 'NA',
                'module_key': 'NA'
            },
            'default': {
                'module': None,
                'tag': None,
                'key': None,
                'stake': None,
                'subnet': 'commune',
                'refresh': False,
                'address': None,
                'wait_for_server': False,
                'module_key': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ssh_key': {
            'input': {'key_file': 'str', 'passphrase': 'NA'},
            'default': {
                'key_file': '/Users/salvivona/.ssh/id_rsa',
                'passphrase': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_tree': {
            'input': {
                'cache': 'bool',
                'update': 'bool',
                'verbose': 'bool',
                'mode': 'str',
                'search': 'NA'
            },
            'default': {
                'search': None,
                'mode': 'path',
                'cache': True,
                'update': False,
                'verbose': False
            },
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'pip_exists': {
            'input': {'lib': 'str', 'verbose': 'str'},
            'default': {'lib': None, 'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_trainable_params': {
            'input': {'model': 'nn.Module'},
            'default': {'model': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'static'
        },
        'resport': {
            'input': {'port': 'int', 'var_path': 'str', 'root': 'bool'},
            'default': {'port': None, 'var_path': 'reserved_ports', 'root': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'vote': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'install_docker_gpus': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_role': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'start_node': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mine': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'vstats': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'port_available': {
            'input': {'port': 'int', 'ip': 'str'},
            'default': {'port': None, 'ip': '0.0.0.0'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_user': {
            'input': {'role': 'str', 'address': 'NA'},
            'default': {'address': None, 'role': 'user', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'test': {
            'input': {'verbose': 'bool', 'modules': 'list'},
            'default': {
                'modules': ['server', 'key', 'namespace', 'executor'],
                'verbose': False
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'watch': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'import_module': {
            'input': {'import_path': 'str'},
            'default': {'import_path': None},
            'output': 'Object',
            'docs': None,
            'type': 'cls'
        },
        'restart_valis': {
            'input': {'network': 'str', 'search': 'NA'},
            'default': {'search': None, 'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'match_module_hash': {
            'input': {'hash': 'str', 'module': 'str'},
            'default': {'hash': None, 'module': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        match the hash of a module\n        ',
            'type': 'cls'
        },
        'resolve_name': {
            'input': {
                'module': 'str',
                'tag': 'str',
                'name': 'str',
                'tag_seperator': 'str'
            },
            'default': {
                'module': None,
                'tag': None,
                'name': None,
                'tag_seperator': '::',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_stats': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'stwrite': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'find_classes': {
            'input': {'module': 'NA'},
            'default': {'module': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_config_tree': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'addy': {
            'input': {
                'name': 'str',
                'network': 'str',
                'timeout': 'int',
                'sleep_interval': 'int'
            },
            'default': {
                'name': 'module',
                'network': 'local',
                'timeout': 100,
                'sleep_interval': 1,
                'kwargs': None
            },
            'output': {},
            'docs': '\n        Root module\n        ',
            'type': 'cls'
        },
        'locals2kwargs': {
            'input': {
                'locals_dict': 'dict',
                'seperate_args': 'bool',
                'merge_kwargs': 'bool'
            },
            'default': {
                'locals_dict': None,
                'seperate_args': False,
                'merge_kwargs': True
            },
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'set_server_name': {
            'input': {'name': 'str'},
            'default': {'name': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_namespace': {
            'input': {'search': 'str', 'network': 'str', 'update': 'bool'},
            'default': {
                'search': None,
                'network': 'local',
                'update': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'detailed_error': {
            'input': {'e': 'NA'},
            'default': {'e': None},
            'output': 'dict',
            'docs': None,
            'type': 'static'
        },
        'docker_ps': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'address2ip': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': 'str',
            'docs': None,
            'type': 'static'
        },
        'resolve_tag_path': {
            'input': {'tag': 'NA'},
            'default': {'tag': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'most_free_gpu': {
            'input': {'free_gpu_memory': 'dict', 'mode': 'bool'},
            'default': {'free_gpu_memory': None, 'mode': 'int', 'kwargs': None},
            'output': 'union[int, typing',
            'docs': ' Returns a dictionary of gpu_id to max memory for each gpu.\n     
Args:\n            total_memory (int, optional): Total memory to allocate. Defaults to 
None.\n            buffer_memory (int, optional): Buffer memory to leave on each gpu. 
Defaults to 10.\n        \n        Returns \n            Dict[int, str]: Dictionary of 
gpu_id to max memory for each gpu.\n        ',
            'type': 'cls'
        },
        'fleet': {
            'input': {
                'n': 'int',
                'max_workers': 'int',
                'parallel': 'bool',
                'timeout': 'int',
                'remote': 'bool',
                'tag': 'NA'
            },
            'default': {
                'n': 2,
                'tag': None,
                'max_workers': 10,
                'parallel': False,
                'timeout': 20,
                'remote': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'munch': {
            'input': {'x': 'dict'},
            'default': {'x': None},
            'output': 'munch.Munch',
            'docs': '\n        Converts a dict to a munch\n        ',
            'type': 'cls'
        },
        'path_config_exists': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'bool',
            'docs': '\n        Checks if the path exists\n        ',
            'type': 'cls'
        },
        'object_path': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'error': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_text_line': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'registered_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'put_torch': {
            'input': {'path': 'str', 'data': 'dict', 'root': 'bool'},
            'default': {'path': None, 'data': None, 'root': False, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_node_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'dash': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module2docpath': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_balance': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_user': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'valis': {
            'input': {'network': 'NA'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_module': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'pypath': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        removes the PWD with respect to where module.py is 
located\n        ',
            'type': 'cls'
        },
        'new_module': {
            'input': {
                'module': 'str',
                'repo': 'str',
                'base': 'str',
                'code': 'str',
                'include_config': 'bool',
                'overwrite': 'bool',
                'module_type': 'str'
            },
            'default': {
                'module': None,
                'repo': None,
                'base': 'base',
                'code': None,
                'include_config': False,
                'overwrite': False,
                'module_type': 'dir'
            },
            'output': {},
            'docs': ' Makes directories for path.\n        ',
            'type': 'cls'
        },
        'actors': {
            'input': {'names_only': 'bool', 'detail': 'bool', 'state': 'str'},
            'default': {
                'state': 'ALIVE',
                'names_only': True,
                'detail': True,
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_context': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_remote': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'net': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'classify_fn': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'hello': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'logs': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'put_text': {
            'input': {'path': 'str', 'text': 'str', 'root': 'bool', 'key': 'NA'},
            'default': {'path': None, 'text': None, 'root': False, 'key': None},
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'serializer': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'server2info': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'rm_json': {
            'input': {'root': 'bool', 'path': 'NA'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'walk': {
            'input': {'path': 'str', 'module': 'str'},
            'default': {'path': None, 'module': False},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'str2python': {
            'input': {'input': 'NA'},
            'default': {'input': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'key2address': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'functions': {
            'input': {'search': 'str', 'include_parents': 'bool'},
            'default': {'search': None, 'include_parents': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ls': {
            'input': {
                'path': 'str',
                'recursive': 'bool',
                'root': 'bool',
                'return_full_path': 'bool'
            },
            'default': {
                'path': '',
                'recursive': False,
                'root': False,
                'return_full_path': True
            },
            'output': {},
            'docs': '\n        provides a list of files in the path \n\n        this 
path is relative to the module path if you dont specifcy ./ or ~/ or /\n        which 
means its based on the module path\n        ',
            'type': 'cls'
        },
        'rm_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_fn': {
            'input': {'fn_name': 'NA', 'obj': 'NA'},
            'default': {'fn_name': None, 'obj': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_network': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_subnet': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_fn': {
            'input': {'module': 'str', 'fn': 'str', 'args': 'list', 'kwargs': 'dict'},
            'default': {'module': None, 'fn': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'total_supply': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_static_methods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'path2config': {
            'input': {'path': 'str', 'to_munch': 'bool'},
            'default': {'path': None, 'to_munch': False},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'get_json': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'chown_cache': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_root_key': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'resolve_ip': {
            'input': {'external': 'bool', 'ip': 'NA'},
            'default': {'ip': None, 'external': True},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'sign': {
            'input': {'data': 'dict', 'key': 'str'},
            'default': {'data': None, 'key': None, 'kwargs': None},
            'output': 'bool',
            'docs': None,
            'type': 'self'
        },
        'root_address': {
            'input': {
                'name': 'str',
                'network': 'str',
                'timeout': 'int',
                'sleep_interval': 'int'
            },
            'default': {
                'name': 'module',
                'network': 'local',
                'timeout': 100,
                'sleep_interval': 1,
                'kwargs': None
            },
            'output': {},
            'docs': '\n        Root module\n        ',
            'type': 'cls'
        },
        'add_api_keys': {
            'input': {'api_keys': 'str'},
            'default': {'api_keys': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_function_signature_map': {
            'input': {'include_parents': 'bool', 'obj': 'NA'},
            'default': {'obj': None, 'include_parents': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'find_lines': {
            'input': {'text': 'str', 'search': 'str'},
            'default': {'text': None, 'search': None},
            'output': 'list[str]',
            'docs': '\n        Finds the lines in text with search\n        ',
            'type': 'self'
        },
        'async_connect': {
            'input': {
                'module': 'str',
                'network': 'str',
                'virtual': 'bool',
                'verbose': 'bool',
                'prefix_match': 'bool',
                'mode': 'str',
                'namespace': 'NA',
                'key': 'NA'
            },
            'default': {
                'module': None,
                'network': None,
                'namespace': None,
                'mode': 'http',
                'virtual': False,
                'verbose': True,
                'prefix_match': False,
                'key': None,
                'kwargs': None
            },
            'output': {},
            'docs': '\n        Connects to a server by the name of the module\n        
:param module: name of the module\n        ',
            'type': 'cls'
        },
        'network2namespace': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'str',
            'docs': None,
            'type': 'self'
        },
        'module_name': {
            'input': {'simple': 'bool'},
            'default': {'simple': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_key': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': 'bool',
            'docs': None,
            'type': 'self'
        },
        'logmap': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'dashboard': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_logs': {
            'input': {
                'module': 'str',
                'tail': 'int',
                'verbose': 'bool',
                'mode': 'str'
            },
            'default': {'module': None, 'tail': 100, 'verbose': True, 'mode': 'cmd'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart_server': {
            'input': {'module': 'str'},
            'default': {'module': None, 'kwargs': None},
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'round': {
            'input': {'x': 'union[float, int]', 'sig': 'int', 'small_value': 'float'},
            'default': {'x': None, 'sig': 6, 'small_value': 1e-09},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'available_modules': {
            'input': {
                'cache': 'bool',
                'update': 'bool',
                'verbose': 'bool',
                'mode': 'str',
                'search': 'NA'
            },
            'default': {
                'search': None,
                'mode': 'path',
                'cache': True,
                'update': False,
                'verbose': False
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'libs': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_api_key': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2list': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'memory_usage': {
            'input': {'fmt': 'str'},
            'default': {'fmt': 'gb'},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'readme': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'address2key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'delta_t': {
            'input': {'t': 'NA'},
            'default': {'t': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'key_stats': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'infer_device_map': {
            'input': {
                'model': 'str',
                'max_memory': 'dict',
                'block_prefix': 'str',
                'buffer_memory': 'float',
                'quantize': 'str',
                'verbose': 'bool'
            },
            'default': {
                'model': None,
                'max_memory': None,
                'block_prefix': 'model.layers',
                'buffer_memory': '1gb',
                'quantize': None,
                'verbose': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_actor_id': {
            'input': {'actor': 'NA'},
            'default': {'actor': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'dlogs': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        logs of the docker contianer\n        ',
            'type': 'cls'
        },
        'default_config': {
            'input': {'path': 'str', 'to_munch': 'bool', 'root': 'bool'},
            'default': {'path': None, 'to_munch': False, 'root': False},
            'output': {},
            'docs': '\n        Args:\n            path: The path to the config file\n  
to_munch: If true, then convert the config to a munch\n        ',
            'type': 'cls'
        },
        'mems': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'deregister_server': {
            'input': {'name': 'str', 'network': 'str'},
            'default': {'name': None, 'network': 'local'},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'pm2_kill': {
            'input': {'name': 'str', 'verbose': 'bool', 'prefix_match': 'bool'},
            'default': {'name': None, 'verbose': False, 'prefix_match': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'most_free_gpu_memory': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'is_admin': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'init_nn': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'empty_namespace': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        empty the namespace\n        ',
            'type': 'cls'
        },
        'ray_actors': {
            'input': {'names_only': 'bool', 'detail': 'bool', 'state': 'str'},
            'default': {
                'state': 'ALIVE',
                'names_only': True,
                'detail': True,
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'encrypt_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_all_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        Kill all of the servers\n        ',
            'type': 'static'
        },
        'add_peers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'save': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'sidebar': {
            'input': {'sidebar': 'bool'},
            'default': {'sidebar': True},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'scan_ports': {
            'input': {'start_port': 'int', 'end_port': 'int', 'host': 'NA'},
            'default': {'host': None, 'start_port': 1, 'end_port': 50000},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'datetime': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_shortcut': {
            'input': {'shortcut': 'NA', 'name': 'NA'},
            'default': {'shortcut': None, 'name': None},
            'output': 'dict[str, str]',
            'docs': None,
            'type': 'cls'
        },
        'keys': {
            'input': {'search': 'NA'},
            'default': {'search': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'api_keys': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'wait_for_server': {
            'input': {
                'name': 'str',
                'network': 'str',
                'timeout': 'int',
                'sleep_interval': 'int',
                'verbose': 'bool'
            },
            'default': {
                'name': None,
                'network': 'local',
                'timeout': 600,
                'sleep_interval': 1,
                'verbose': False
            },
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'random_colour': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'scan': {
            'input': {
                'max_futures': 'int',
                'network': 'str',
                'update': 'bool',
                'schema': 'bool',
                'namespace': 'bool',
                'hardware': 'bool',
                'search': 'NA'
            },
            'default': {
                'search': None,
                'max_futures': 100,
                'network': 'local',
                'update': False,
                'schema': True,
                'namespace': True,
                'hardware': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'importobj': {
            'input': {'key': 'str', 'verbose': 'bool'},
            'default': {'key': None, 'verbose': False},
            'output': {},
            'docs': '\n        \n        Import an object from a string with the format
of {module_path}.{object}\n        Examples: import_object("torch.nn"): imports nn from
torch\n        \n        ',
            'type': 'cls'
        },
        'link_cmd': {
            'input': {'old': 'NA', 'new': 'NA'},
            'default': {'old': None, 'new': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_function_signature': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': 'dict',
            'docs': '\n        get the signature of a function\n        ',
            'type': 'cls'
        },
        'fncode': {
            'input': {'fn': 'str', 'detail': 'bool'},
            'default': {'fn': None, 'detail': False},
            'output': {},
            'docs': '\n        Returns the code of a function\n        ',
            'type': 'cls'
        },
        'to_dict': {
            'input': {},
            'default': {},
            'output': 'dict',
            'docs': None,
            'type': 'self'
        },
        'type_str': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'try_fn_n_times': {
            'input': {'kwargs': 'dict', 'try_count_limit': 'int', 'fn': 'NA'},
            'default': {'fn': None, 'kwargs': None, 'try_count_limit': 10},
            'output': {},
            'docs': '\n        try a function n times\n        ',
            'type': 'static'
        },
        'has_module': {
            'input': {'module': 'NA'},
            'default': {'module': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'node_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_model_shortcut': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'attributes': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'pm2_rm_logs': {
            'input': {'name': 'NA'},
            'default': {'name': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_exists': {
            'input': {'name': 'str'},
            'default': {'name': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'jsonable': {
            'input': {'value': 'NA'},
            'default': {'value': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'self_restart': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_model_size': {
            'input': {
                'model': 'nn.Module',
                'model_inflation_ratio': 'float',
                'keys': 'list[str]',
                'fmt': 'str'
            },
            'default': {
                'model': None,
                'model_inflation_ratio': 1.0,
                'fmt': 'b',
                'keys': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_root_module': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'module2connection': {
            'input': {'modules': 'NA', 'network': 'NA'},
            'default': {'modules': None, 'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_key': {
            'input': {'key': 'NA'},
            'default': {'key': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'init': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_address': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path2config_path': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_loop': {
            'input': {'remote': 'bool', 'update_loop': 'bool', 'name': 'str'},
            'default': {'remote': True, 'update_loop': True, 'name': 'loop'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'too_old': {
            'input': {'timestamp': 'int', 'max_age': 'int'},
            'default': {'timestamp': None, 'max_age': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'containers': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'cp': {
            'input': {'path1': 'str', 'path2': 'str', 'refresh': 'bool'},
            'default': {'path1': None, 'path2': None, 'refresh': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'select_network': {
            'input': {'network': 'NA'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'emoji': {
            'input': {'name': 'str'},
            'default': {'name': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'timer': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_key_address': {
            'input': {'key': 'NA'},
            'default': {'key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'threads': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'time2datetime': {
            'input': {'t': 'float'},
            'default': {'t': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_namespace': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'params_map': {
            'input': {'fmt': 'str', 'model': 'NA'},
            'default': {'model': None, 'fmt': 'b'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_module_dir': {
            'input': {'simple': 'bool', 'obj': 'NA'},
            'default': {'obj': None, 'simple': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'launchpad': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'hasc': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'free_gpu_memory': {
            'input': {
                'max_gpu_ratio': 'float',
                'reserved_gpus': 'bool',
                'buffer_memory': 'float',
                'fmt': 'str'
            },
            'default': {
                'max_gpu_ratio': 1.0,
                'reserved_gpus': False,
                'buffer_memory': 0,
                'fmt': 'b'
            },
            'output': 'dict[int, float]',
            'docs': None,
            'type': 'cls'
        },
        'from_json': {
            'input': {'json_str': 'str'},
            'default': {'json_str': None},
            'output': 'Module',
            'docs': None,
            'type': 'cls'
        },
        'bytes2str': {
            'input': {'data': 'bytes', 'mode': 'str'},
            'default': {'data': None, 'mode': 'utf-8'},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'python': {
            'input': {'interpreter': 'str'},
            'default': {'cmd': None, 'interpreter': 'python3'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'file_exists': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'select_key': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'object_module_path': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_logger': {
            'input': {'logger': 'NA'},
            'default': {'logger': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'remove_user': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': 'None',
            'docs': None,
            'type': 'self'
        },
        'run_python': {
            'input': {'path': 'str', 'interpreter': 'str'},
            'default': {'path': None, 'interpreter': 'python3'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'register': {
            'input': {
                'tag': 'str',
                'key': 'str',
                'stake': 'int',
                'subnet': 'str',
                'refresh': 'bool',
                'wait_for_server': 'bool',
                'module': 'NA',
                'address': 'NA',
                'module_key': 'NA'
            },
            'default': {
                'module': None,
                'tag': None,
                'key': None,
                'stake': None,
                'subnet': 'commune',
                'refresh': False,
                'address': None,
                'wait_for_server': False,
                'module_key': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'model_max_gpus': {
            'input': {'model': 'NA'},
            'default': {'model': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_address': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'shuffle': {
            'input': {'x': 'list'},
            'default': {'x': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'miners': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'dict_delete': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'save_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_get': {
            'input': {},
            'default': {'jobs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'colour': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_module_root': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'readlines': {
            'input': {
                'path': 'str',
                'start_line': 'int',
                'end_line': 'int',
                'resolve': 'bool',
                'root': 'bool'
            },
            'default': {
                'path': None,
                'start_line': 0,
                'end_line': 0,
                'root': False,
                'resolve': True
            },
            'output': 'list[str]',
            'docs': None,
            'type': 'self'
        },
        'register_server': {
            'input': {'name': 'str', 'address': 'str', 'network': 'str'},
            'default': {'name': None, 'address': None, 'network': 'local'},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'get_torch': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn2hash': {
            'input': {'mode': 'str'},
            'default': {'args': None, 'mode': 'sha256', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_valid_ss58_address': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'model_menu': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_peer': {
            'input': {'network': 'str', 'tag': 'NA'},
            'default': {'network': 'local', 'tag': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_generator': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Is this shiz a generator dawg?\n        ',
            'type': 'cls'
        },
        'rm_many': {
            'input': {'paths': 'list[str]'},
            'default': {'paths': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'timestamp': {
            'input': {},
            'default': {},
            'output': 'float',
            'docs': None,
            'type': 'cls'
        },
        'get_env': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': 'None',
            'docs': '\n        Pay attention to this function. It sets the environment 
variable\n        ',
            'type': 'cls'
        },
        'add_server': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'round_decimals': {
            'input': {
                'x': 'union[float, int]',
                'decimals': 'int',
                'small_value': 'float'
            },
            'default': {'x': None, 'decimals': 6, 'small_value': 1e-09},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'idcard': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'self'
        },
        'unresport': {
            'input': {
                'port': 'int',
                'verbose': 'bool',
                'root': 'bool',
                'var_path': 'str'
            },
            'default': {
                'port': None,
                'var_path': 'reserved_ports',
                'verbose': True,
                'root': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'batch': {
            'input': {'x': 'list', 'batch_size': 'int'},
            'default': {'x': None, 'batch_size': 8},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_available_port': {
            'input': {
                'port_range': 'list[int]',
                'ip': 'str',
                'reserve': 'bool',
                'random_selection': 'bool',
                'ports': 'NA',
                'avoid_ports': 'NA'
            },
            'default': {
                'ports': None,
                'port_range': None,
                'ip': None,
                'avoid_ports': None,
                'reserve': False,
                'random_selection': True
            },
            'output': {},
            'docs': '\n        \n        Get an availabldefe port within the 
{port_range} [start_port, end_poort] and {ip}\n        ',
            'type': 'cls'
        },
        'simple2config': {
            'input': {'path': 'str', 'to_munch': 'bool'},
            'default': {'path': None, 'to_munch': False},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'decrypt_path': {
            'input': {'path': 'str', 'prefix': 'str', 'key': 'NA'},
            'default': {'path': None, 'key': None, 'prefix': 'ENCRYPTED'},
            'output': 'str',
            'docs': '\n        Encrypts the path\n        ',
            'type': 'cls'
        },
        'setattributes': {
            'input': {'new_attributes': 'dict[str, typing'},
            'default': {'new_attributes': None},
            'output': 'None',
            'docs': '\n        Set a dictionary to the slf attributes \n        ',
            'type': 'self'
        },
        'external_ip': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'call': {
            'input': {'n': 'int', 'return_future': 'bool', 'remote': 'bool'},
            'default': {
                'args': None,
                'n': 1,
                'return_future': False,
                'remote': False,
                'kwargs': None
            },
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'add_model_shortcut': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn': {
            'input': {'module': 'str', 'fn': 'str', 'args': 'list', 'kwargs': 'dict'},
            'default': {'module': None, 'fn': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'critical': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'class_name': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'import_object': {
            'input': {'key': 'str', 'verbose': 'bool'},
            'default': {'key': None, 'verbose': False},
            'output': 'any',
            'docs': '\n        \n        Import an object from a string with the format
of {module_path}.{object}\n        Examples: import_object("torch.nn"): imports nn from
torch\n        \n        ',
            'type': 'cls'
        },
        'model_options': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ss58_decode': {
            'input': {'data': 'union[str, bytes]'},
            'default': {'data': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_valis': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path2object': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'serialize': {
            'input': {'x': 'NA'},
            'default': {'x': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_gpus': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_property': {
            'input': {'fn': 'Callable'},
            'default': {'fn': None},
            'output': 'bool',
            'docs': '\n        is the function a property\n        ',
            'type': 'cls'
        },
        'key2balance': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'randcolor': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_success': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_port': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_encrypted_path': {
            'input': {'path': 'str', 'prefix': 'str'},
            'default': {'path': None, 'prefix': 'ENCRYPTED'},
            'output': 'bool',
            'docs': '\n        Encrypts the path\n        ',
            'type': 'self'
        },
        'address2module': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'serve': {
            'input': {
                'module': 'any',
                'tag': 'str',
                'port': 'int',
                'server_name': 'str',
                'kwargs': 'dict',
                'refresh': 'bool',
                'wait_for_server': 'bool',
                'remote': 'bool',
                'server_mode': 'str',
                'tag_seperator': 'str',
                'update': 'bool',
                'max_workers': 'int',
                'mode': 'str',
                'public': 'bool',
                'verbose': 'bool',
                'network': 'str'
            },
            'default': {
                'module': None,
                'tag': None,
                'network': 'local',
                'port': None,
                'server_name': None,
                'kwargs': None,
                'refresh': True,
                'wait_for_server': False,
                'remote': True,
                'server_mode': 'http',
                'tag_seperator': '::',
                'update': False,
                'max_workers': None,
                'mode': 'thread',
                'public': False,
                'verbose': False,
                'extra_kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_shortcut': {
            'input': {'shortcut': 'str'},
            'default': {'shortcut': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'process': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_port_range': {
            'input': {'port_range': 'list'},
            'default': {'port_range': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'module_path': {
            'input': {'simple': 'bool'},
            'default': {'simple': True},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'fn_info': {
            'input': {'fn': 'str'},
            'default': {'fn': 'info'},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'check_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'auth': {
            'input': {},
            'default': {'args': None, 'key': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'help': {
            'input': {
                'schema': 'bool',
                'namespace': 'bool',
                'peers': 'bool',
                'hardware': 'bool'
            },
            'default': {
                'schema': True,
                'namespace': False,
                'peers': False,
                'hardware': False
            },
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'add_admin': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'free_address': {
            'input': {},
            'default': {'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_prefix': {
            'input': {'prefix': 'str'},
            'default': {'prefix': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_namespace': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_sample_schema': {
            'input': {'x': 'dict'},
            'default': {'x': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'key2tokens': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_free_ports': {
            'input': {'n': 'int'},
            'default': {'n': 1, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'restart_replicas': {
            'input': {'network': 'str'},
            'default': {'network': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'stside': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'tqdm': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'key_exists': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_private_key': {
            'input': {'s': 'str'},
            'default': {'s': None},
            'output': 'bool',
            'docs': None,
            'type': 'static'
        },
        'learn': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'compose': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'name2address': {
            'input': {'name': 'str', 'network': 'str'},
            'default': {'name': None, 'network': 'local'},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'list_modules': {
            'input': {'search': 'NA'},
            'default': {'search': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'setc': {
            'input': {'k': 'NA', 'v': 'NA', 'password': 'NA'},
            'default': {'k': None, 'v': None, 'password': None},
            'output': {},
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'user_exists': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'start': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'sandbox': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_ratio_selection': {
            'input': {'x': 'list', 'ratio': 'float'},
            'default': {'x': None, 'ratio': 0.5},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'static_fns': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'exists': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mv_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'shell': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'refresh': {
            'input': {
                'name': 'str',
                'mode': 'str',
                'verbose': 'bool',
                'prefix_match': 'bool'
            },
            'default': {
                'name': None,
                'mode': 'pm2',
                'verbose': False,
                'prefix_match': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_staketo': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'sync': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'valid_module': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_tags': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'free_port': {
            'input': {
                'port_range': 'list[int]',
                'ip': 'str',
                'reserve': 'bool',
                'random_selection': 'bool',
                'ports': 'NA',
                'avoid_ports': 'NA'
            },
            'default': {
                'ports': None,
                'port_range': None,
                'ip': None,
                'avoid_ports': None,
                'reserve': False,
                'random_selection': True
            },
            'output': 'int',
            'docs': '\n        \n        Get an availabldefe port within the 
{port_range} [start_port, end_poort] and {ip}\n        ',
            'type': 'cls'
        },
        'from_dict': {
            'input': {'input_dict': 'dict[str, typing'},
            'default': {'input_dict': None},
            'output': 'Module',
            'docs': None,
            'type': 'cls'
        },
        'pd': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        import pandas\n        ',
            'type': 'cls'
        },
        'detokenize': {
            'input': {'tokenizer': 'str', 'tokens': 'NA'},
            'default': {
                'tokens': None,
                'tokenizer': 'gpt2',
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_yaml': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False},
            'output': 'dict',
            'docs': 'f\n        Loads a yaml file\n        ',
            'type': 'cls'
        },
        'add_tree': {
            'input': {'tree_path': 'str'},
            'default': {'tree_path': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pycode': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mem': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_ls': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'used_ports': {
            'input': {'ip': 'str'},
            'default': {'ip': '0.0.0.0'},
            'output': 'list[int]',
            'docs': None,
            'type': 'cls'
        },
        'import_path': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_all': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'lsdir': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'fn_code': {
            'input': {'fn': 'str', 'detail': 'bool'},
            'default': {'fn': None, 'detail': False},
            'output': 'str',
            'docs': '\n        Returns the code of a function\n        ',
            'type': 'cls'
        },
        'resolve_keypath': {
            'input': {'key': 'NA'},
            'default': {'key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'join_threads': {
            'input': {'threads': "[<class 'str'>, <class 'list'>]"},
            'default': {'threads': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mkdir': {
            'input': {'exist_ok': 'bool', 'path': 'str'},
            'default': {'path': 'bro', 'exist_ok': True},
            'output': {},
            'docs': ' Makes directories for path.\n        ',
            'type': 'cls'
        },
        'add_root_keys': {
            'input': {'n': 'int', 'tag': 'NA'},
            'default': {'n': 1, 'tag': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'dead_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'ip_to_int': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unreserve_gpu_memory': {
            'input': {'gpu_memory': 'dict'},
            'default': {'gpu_memory': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_key_for_address': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'actor_exists': {
            'input': {'actor': 'NA'},
            'default': {'actor': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'loop_fleet': {
            'input': {'n': 'int'},
            'default': {'n': 2, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'ensure_lib': {
            'input': {'lib': 'str', 'verbose': 'bool'},
            'default': {'lib': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'sample': {
            'input': {'options': 'list', 'n': 'int'},
            'default': {'options': None, 'n': 2},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rename_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'dict_rm': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'create_key': {
            'input': {'key': 'NA'},
            'default': {'key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'model_gpus': {
            'input': {'num_shard': 'int', 'model': 'NA'},
            'default': {'model': None, 'num_shard': 2},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unstake_all': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'choice': {
            'input': {'options': 'union[list, dict]'},
            'default': {'options': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'sid': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'chmod_scripts': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reg': {
            'input': {
                'tag': 'str',
                'key': 'str',
                'stake': 'int',
                'subnet': 'str',
                'refresh': 'bool',
                'wait_for_server': 'bool',
                'module': 'NA',
                'address': 'NA',
                'module_key': 'NA'
            },
            'default': {
                'module': None,
                'tag': None,
                'key': None,
                'stake': None,
                'subnet': 'commune',
                'refresh': False,
                'address': None,
                'wait_for_server': False,
                'module_key': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'connect': {
            'input': {
                'module': 'str',
                'network': 'str',
                'virtual': 'bool',
                'verbose': 'bool',
                'prefix_match': 'bool',
                'return_future': 'bool',
                'mode': 'str',
                'namespace': 'NA',
                'key': 'NA'
            },
            'default': {
                'module': None,
                'network': None,
                'namespace': None,
                'mode': 'http',
                'virtual': True,
                'verbose': False,
                'prefix_match': False,
                'key': None,
                'return_future': False
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'argparse': {
            'input': {'verbose': 'bool'},
            'default': {'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_config': {
            'input': {},
            'default': {},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'get_model_device': {
            'input': {'fast_and_lazy': 'bool', 'model': 'NA'},
            'default': {'model': None, 'fast_and_lazy': True},
            'output': 'torch.device',
            'docs': None,
            'type': 'cls'
        },
        'unreserve_gpus': {
            'input': {'gpu_memory': 'dict'},
            'default': {'gpu_memory': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_annotations': {
            'input': {'fn': '<built-in function callable>'},
            'default': {'fn': None},
            'output': 'dict',
            'docs': None,
            'type': 'static'
        },
        'client': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'Client',
            'docs': None,
            'type': 'cls'
        },
        'echo': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'deserialize': {
            'input': {'x': 'NA'},
            'default': {'x': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'jupyter': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_color': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'merge': {
            'input': {
                'include_hidden': 'bool',
                'allow_conflicts': 'bool',
                'verbose': 'bool',
                'a': 'NA',
                'b': 'NA'
            },
            'default': {
                'a': None,
                'b': None,
                'include_hidden': True,
                'allow_conflicts': True,
                'verbose': False
            },
            'output': {},
            'docs': '\n        Merge the functions of a python object into the current 
object (a)\n        ',
            'type': 'cls'
        },
        'start_local_node': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'init_kwargs': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'peers': {
            'input': {'network': 'str', 'tag': 'NA'},
            'default': {'network': 'local', 'tag': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'isdir': {
            'input': {'root': 'bool', 'path': 'NA'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_text': {
            'input': {
                'path': 'str',
                'start_byte': 'int',
                'end_byte': 'int',
                'start_line': 'int',
                'end_line': 'int',
                'tail': 'NA'
            },
            'default': {
                'path': None,
                'tail': None,
                'start_byte': 0,
                'end_byte': 0,
                'start_line': None,
                'end_line': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reserved_ports': {
            'input': {'var_path': 'str'},
            'default': {'var_path': 'reserved_ports'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_wait': {
            'input': {},
            'default': {'jobs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tostr': {
            'input': {'input': 'NA'},
            'default': {'input': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'simple2path': {
            'input': {'path': 'NA'},
            'default': {'path': None},
            'output': 'dict[str, str]',
            'docs': None,
            'type': 'cls'
        },
        'time2date': {
            'input': {'t': 'float'},
            'default': {'t': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'run_generator': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '  \n        ',
            'type': 'cls'
        },
        'resnet': {
            'input': {'network': 'NA'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reserve_gpus': {
            'input': {
                'gpu_memory': 'union[typing',
                'refresh': 'bool',
                'root': 'bool'
            },
            'default': {
                'gpu_memory': None,
                'refresh': False,
                'root': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_response': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': 'bool',
            'docs': None,
            'type': 'static'
        },
        'rand_tag': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'actor_map': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'init_empty_weights': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'update_module': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_fn_allowed': {
            'input': {'fn_name': 'str'},
            'default': {'fn_name': None},
            'output': 'bool',
            'docs': None,
            'type': 'self'
        },
        'unregistered_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_root': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'subnets': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'push': {
            'input': {'msg': 'str', 'cwd': 'NA'},
            'default': {'msg': 'update', 'cwd': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn_schema': {
            'input': {
                'fn': 'str',
                'defaults': 'bool',
                'code': 'bool',
                'docs': 'bool'
            },
            'default': {'fn': None, 'defaults': True, 'code': False, 'docs': True},
            'output': 'dict',
            'docs': '\n        Get function schema of function in cls\n        ',
            'type': 'cls'
        },
        'put_yaml': {
            'input': {'path': 'str', 'data': 'dict', 'root': 'bool'},
            'default': {'path': None, 'data': None, 'root': False},
            'output': {},
            'docs': '\n        Loads a yaml file\n        ',
            'type': 'cls'
        },
        'hasfn': {
            'input': {'fn': 'str'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'getclassattr': {
            'input': {'k': 'str'},
            'default': {'k': None},
            'output': 'any',
            'docs': None,
            'type': 'cls'
        },
        'resolve_key': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': 'str',
            'docs': None,
            'type': 'self'
        },
        'module2port': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'colors': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_tree': {
            'input': {'tree_path': 'str'},
            'default': {'tree_path': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'root_key_address': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'dict2bytes': {
            'input': {'data': 'str'},
            'default': {'data': None},
            'output': 'bytes',
            'docs': None,
            'type': 'cls'
        },
        'dict_has': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_module': {
            'input': {'module': 'str'},
            'default': {'module': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_api_key': {
            'input': {'api_key': 'str'},
            'default': {'api_key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'keysc': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_self': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        Helper function to kill the server\n        ',
            'type': 'self'
        },
        'time': {
            'input': {'t': 'NA'},
            'default': {'t': None},
            'output': 'float',
            'docs': None,
            'type': 'cls'
        },
        'rm_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_server_name': {
            'input': {
                'module': 'str',
                'tag': 'str',
                'name': 'str',
                'tag_seperator': 'str'
            },
            'default': {
                'module': None,
                'tag': None,
                'name': None,
                'tag_seperator': '::',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_ss58': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'images': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': '\n        images\n        ',
            'type': 'cls'
        },
        'python2str': {
            'input': {'input': 'NA'},
            'default': {'input': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_api_key': {
            'input': {'api_key': 'str', 'cache': 'bool'},
            'default': {'api_key': None, 'cache': True},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'tilde_path': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ssh_pubkey': {
            'input': {'ssh_path': 'NA'},
            'default': {'ssh_path': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_restart': {
            'input': {'stop': 'dict', 'start': 'dict'},
            'default': {'stop': {}, 'start': {}},
            'output': {},
            'docs': '\n        \n        Restart  ray cluster\n        \n        ',
            'type': 'cls'
        },
        'submit': {
            'input': {
                'args': 'list',
                'kwargs': 'dict',
                'timeout': 'int',
                'return_future': 'bool',
                'init_args': 'list',
                'init_kwargs': 'dict',
                'module': 'str',
                'mode': 'str',
                'max_workers': 'int',
                'fn': 'NA',
                'executor': 'NA'
            },
            'default': {
                'fn': None,
                'args': [],
                'kwargs': {},
                'timeout': 20,
                'return_future': False,
                'init_args': [],
                'init_kwargs': {},
                'executor': None,
                'module': None,
                'mode': 'thread',
                'max_workers': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gather': {
            'input': {'jobs': 'list', 'timeout': 'int', 'loop': 'NA'},
            'default': {'jobs': None, 'timeout': 20, 'loop': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'get_class_methods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'module': {
            'input': {'module': 'any'},
            'default': {'module': 'module', 'kwargs': None},
            'output': {},
            'docs': '\n        Wraps a python class as a module\n        ',
            'type': 'cls'
        },
        'loadmems': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_event_loop': {
            'input': {'nest_asyncio': 'bool'},
            'default': {'nest_asyncio': True},
            'output': 'asyncio.AbstractEventLoop',
            'docs': None,
            'type': 'cls'
        },
        'docs': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_serve_kwargs': {
            'input': {'server_name': 'str', 'network': 'str'},
            'default': {'server_name': None, 'network': 'local'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tags': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'infos': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'sleep': {
            'input': {'seconds': 'float'},
            'default': {'seconds': None},
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'rm_server': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_error': {
            'input': {'x': 'dict'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rmdir': {
            'input': {'root': 'bool', 'path': 'NA'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'verify': {
            'input': {'module': 'str', 'auth': 'NA'},
            'default': {'auth': None, 'module': 'subspace', 'kwargs': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'get_stakefrom': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'proto2json': {
            'input': {'data': 'NA'},
            'default': {'data': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_api_keys': {
            'input': {'api_keys': 'str'},
            'default': {'api_keys': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn2code': {
            'input': {'search': 'NA', 'module': 'NA'},
            'default': {'search': None, 'module': None},
            'output': 'dict[str, str]',
            'docs': None,
            'type': 'cls'
        },
        'build_image': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tree': {
            'input': {
                'cache': 'bool',
                'update': 'bool',
                'verbose': 'bool',
                'mode': 'str',
                'search': 'NA'
            },
            'default': {
                'search': None,
                'mode': 'path',
                'cache': True,
                'update': False,
                'verbose': False
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'name2port': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_kill': {
            'input': {'verbose': 'bool', 'actor': 'NA'},
            'default': {'actor': None, 'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'switchnet': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_shortcut': {
            'input': {'shortcut': 'str'},
            'default': {'shortcut': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'encrypt': {
            'input': {
                'data': 'union[str, bytes]',
                'key': 'str',
                'prefix': 'str',
                'password': 'NA'
            },
            'default': {
                'data': None,
                'key': None,
                'prefix': 'ENCRYPTED',
                'password': None
            },
            'output': 'bytes',
            'docs': '\n        encrypt data with key\n        ',
            'type': 'cls'
        },
        'remote_fn': {
            'input': {
                'fn': 'str',
                'module': 'str',
                'args': 'list',
                'kwargs': 'dict',
                'name': 'str',
                'tag': 'str',
                'refresh': 'bool',
                'tag_seperator': 'str'
            },
            'default': {
                'fn': 'train',
                'module': None,
                'args': None,
                'kwargs': None,
                'name': None,
                'tag': None,
                'refresh': True,
                'tag_seperator': '::',
                'extra_launch_kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'remove_number_from_word': {
            'input': {'word': 'str'},
            'default': {'word': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'get_shortcuts': {
            'input': {},
            'default': {},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'address_exists': {
            'input': {'address': 'str'},
            'default': {'address': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'launch': {
            'input': {
                'module': 'str',
                'fn': 'str',
                'args': 'list',
                'kwargs': 'dict',
                'name': 'optional[str]',
                'refresh': 'bool',
                'mode': 'str',
                'tag': 'str',
                'tag_seperator': 'str',
                'verbose': 'bool',
                'update': 'bool'
            },
            'default': {
                'module': None,
                'fn': 'serve',
                'args': None,
                'kwargs': None,
                'name': None,
                'refresh': True,
                'mode': 'pm2',
                'tag': None,
                'tag_seperator': '::',
                'verbose': True,
                'update': False,
                'extra_launch_kwargs': None
            },
            'output': {},
            'docs': '\n        Launch a module as pm2 or ray \n        ',
            'type': 'cls'
        },
        'timestamp_to_iso': {
            'input': {'timestamp': 'NA'},
            'default': {'timestamp': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'root_key2address': {
            'input': {'search': 'str'},
            'default': {'search': 'module'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'split_gather': {
            'input': {'jobs': 'list', 'n': 'int'},
            'default': {'jobs': None, 'n': 3, 'kwargs': None},
            'output': 'list',
            'docs': None,
            'type': 'cls'
        },
        'get_balance': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'key2mem': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'st_load_css': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'get_function_default_map': {
            'input': {'obj': 'any', 'include_parents': 'bool'},
            'default': {'obj': None, 'include_parents': False},
            'output': 'dict[str, typing',
            'docs': None,
            'type': 'cls'
        },
        'frontend': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'self_vote': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'block': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'install_docker': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'dict2munch': {
            'input': {'x': 'dict'},
            'default': {'x': None},
            'output': 'munch.Munch',
            'docs': '\n        Converts a dict to a munch\n        ',
            'type': 'cls'
        },
        'install_pm2': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'enable_jupyter': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'tokenize': {
            'input': {'tokenizer': 'str', 'text': 'NA'},
            'default': {
                'text': None,
                'tokenizer': 'gpt2',
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_stakefrom': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'restart': {
            'input': {
                'name': 'str',
                'mode': 'str',
                'verbose': 'bool',
                'prefix_match': 'bool'
            },
            'default': {
                'name': None,
                'mode': 'pm2',
                'verbose': False,
                'prefix_match': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'env': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': {},
            'docs': '\n        Pay attention to this function. It sets the environment 
variable\n        ',
            'type': 'cls'
        },
        'key_encrypted': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'build_spec': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'bro': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'has_readme': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'my_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'success': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ls_pm2': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'int_to_ip': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'loops': {
            'input': {},
            'default': {'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'to_json': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'self'
        },
        'upgrade_proto': {
            'input': {'verbose': 'bool'},
            'default': {'verbose': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'register_dead_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'popc': {
            'input': {'key': 'str'},
            'default': {'key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'port2name': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'infer_gpus': {
            'input': {'model': 'NA'},
            'default': {'model': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'param_keys': {
            'input': {'model': 'nn.Module'},
            'default': {'model': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'is_dir_empty': {
            'input': {'path': 'str'},
            'default': {'path': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'cpu_count': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'reserved_gpus': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'dict[str, int]',
            'docs': None,
            'type': 'cls'
        },
        'refresh_users': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'schema': {
            'input': {
                'search': 'str',
                'code': 'bool',
                'docs': 'bool',
                'include_parents': 'bool',
                'defaults': 'bool'
            },
            'default': {
                'search': None,
                'code': False,
                'docs': True,
                'include_parents': False,
                'defaults': True
            },
            'output': 'Schema',
            'docs': None,
            'type': 'cls'
        },
        'create_actor': {
            'input': {
                'module': 'str',
                'name': 'str',
                'tag': 'str',
                'kwargs': 'dict',
                'args': 'list',
                'cpus': 'int',
                'gpus': 'int',
                'detached': 'bool',
                'max_concurrency': 'int',
                'refresh': 'bool',
                'verbose': 'bool',
                'virtual': 'bool'
            },
            'default': {
                'module': None,
                'name': None,
                'tag': None,
                'kwargs': None,
                'args': None,
                'cpus': 1.0,
                'gpus': 0,
                'detached': True,
                'max_concurrency': 50,
                'refresh': True,
                'verbose': True,
                'virtual': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ensure_ray_context': {
            'input': {'ray_config': 'dict'},
            'default': {'ray_config': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kill_replicas': {
            'input': {'network': 'str'},
            'default': {'network': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'imp': {
            'input': {'key': 'str', 'verbose': 'bool'},
            'default': {'key': None, 'verbose': False},
            'output': {},
            'docs': '\n        \n        Import an object from a string with the format
of {module_path}.{object}\n        Examples: import_object("torch.nn"): imports nn from
torch\n        \n        ',
            'type': 'cls'
        },
        'release_gpus': {
            'input': {'gpu_memory': 'dict'},
            'default': {'gpu_memory': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'generate_ssh_key_pair': {
            'input': {'path': 'NA', 'passphrase': 'NA'},
            'default': {'path': None, 'passphrase': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'addresses': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'savemems': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_parents': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'static'
        },
        'rm_shortcut': {
            'input': {'shortcut': 'NA'},
            'default': {'shortcut': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'kill_nodes': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'n': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_key': {
            'input': {'key': 'str'},
            'default': {'key': None, 'kwargs': None},
            'output': 'None',
            'docs': None,
            'type': 'self'
        },
        'parse_args': {
            'input': {'argv': 'NA'},
            'default': {'argv': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_json': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'most_free_gpus': {
            'input': {
                'n': 'int',
                'free_gpu_memory': 'dict',
                'mode': 'str',
                'fmt': 'str'
            },
            'default': {
                'n': None,
                'free_gpu_memory': None,
                'mode': 'dict',
                'fmt': 'b',
                'kwargs': None
            },
            'output': 'union[int, typing',
            'docs': ' Returns a dictionary of gpu_id to max memory for each gpu.\n     
Args:\n            total_memory (int, optional): Total memory to allocate. Defaults to 
None.\n            buffer_memory (int, optional): Buffer memory to leave on each gpu. 
Defaults to 10.\n        \n        Returns \n            Dict[int, str]: Dictionary of 
gpu_id to max memory for each gpu.\n        ',
            'type': 'cls'
        },
        'dict2str': {
            'input': {'data': 'str'},
            'default': {'data': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'self_methods': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        Gets the self methods in a class\n        ',
            'type': 'cls'
        },
        'get_user': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'setnet': {
            'input': {'network': 'str'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'readme_paths': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_config': {
            'input': {
                'config': 'union[str, dict, nonetype]',
                'kwargs': 'dict',
                'to_munch': 'bool',
                'add_attributes': 'bool',
                'save_config': 'bool'
            },
            'default': {
                'config': None,
                'kwargs': None,
                'to_munch': True,
                'add_attributes': False,
                'save_config': False
            },
            'output': 'munch.Munch',
            'docs': '\n        Set the config as well as its local params\n        ',
            'type': 'self'
        },
        'lag': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'munch2dict': {
            'input': {'x': 'Munch'},
            'default': {'x': None},
            'output': 'dict',
            'docs': '\n        Converts a munch to a dict\n        ',
            'type': 'cls'
        },
        'free_gpus': {
            'input': {
                'max_gpu_ratio': 'float',
                'reserved_gpus': 'bool',
                'buffer_memory': 'float',
                'fmt': 'str'
            },
            'default': {
                'max_gpu_ratio': 1.0,
                'reserved_gpus': False,
                'buffer_memory': 0,
                'fmt': 'b'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_encrypted': {
            'input': {'prefix': 'str', 'data': 'NA'},
            'default': {'data': None, 'prefix': 'ENCRYPTED'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gpu_total_map': {
            'input': {},
            'default': {},
            'output': 'dict[int, typing',
            'docs': None,
            'type': 'cls'
        },
        'rm_namespace': {
            'input': {'network': 'str'},
            'default': {'network': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'info': {
            'input': {
                'schema': 'bool',
                'namespace': 'bool',
                'peers': 'bool',
                'hardware': 'bool'
            },
            'default': {
                'schema': True,
                'namespace': False,
                'peers': False,
                'hardware': False
            },
            'output': 'dict[str, typing',
            'docs': None,
            'type': 'self'
        },
        'resolve_class': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        resolve class of object or return class if it is a 
class\n        ',
            'type': 'static'
        },
        'shortcuts': {
            'input': {},
            'default': {},
            'output': 'dict[str, str]',
            'docs': None,
            'type': 'cls'
        },
        'resolve_device': {
            'input': {'device': 'str', 'verbose': 'bool', 'find_least_used': 'bool'},
            'default': {'device': None, 'verbose': True, 'find_least_used': True},
            'output': 'str',
            'docs': '\n        Resolves the device that is used the least to avoid 
memory overflow.\n        ',
            'type': 'cls'
        },
        'delete': {
            'input': {
                'mode': 'str',
                'verbose': 'bool',
                'update': 'bool',
                'prefix_match': 'bool',
                'network': 'str',
                'module': 'NA'
            },
            'default': {
                'module': None,
                'mode': 'pm2',
                'verbose': False,
                'update': True,
                'prefix_match': False,
                'network': 'local',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'config_path': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'port_free': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'get_model_params': {
            'input': {'model': 'nn.Module'},
            'default': {'model': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'cachefn': {
            'input': {
                'max_age': 'int',
                'update': 'bool',
                'cache': 'bool',
                'cache_folder': 'str',
                'func': 'NA'
            },
            'default': {
                'func': None,
                'max_age': 60,
                'update': False,
                'cache': True,
                'cache_folder': 'cachefn'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'task': {
            'input': {'timeout': 'int', 'mode': 'str', 'fn': 'NA'},
            'default': {'fn': None, 'timeout': 1, 'mode': 'asyncio'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unreserve_ports': {
            'input': {'verbose': 'bool', 'root': 'bool', 'var_path': 'str'},
            'default': {
                'ports': None,
                'var_path': 'reserved_ports',
                'verbose': True,
                'root': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'determine_type': {
            'input': {'x': 'NA'},
            'default': {'x': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_module': {
            'input': {'module': 'NA'},
            'default': {'module': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'merge_dict': {
            'input': {'python_obj': 'any', 'include_hidden': 'bool'},
            'default': {'python_obj': None, 'include_hidden': False},
            'output': {},
            'docs': '\n        Merge the dictionaries of a python object into the 
current object\n        ',
            'type': 'self'
        },
        'x': {
            'input': {'y': 'int'},
            'default': {'y': 1},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'model_gpu_memory': {
            'input': {'model': 'str', 'num_shard': 'int'},
            'default': {'model': None, 'num_shard': 2},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'install_python': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'executor': {
            'input': {'max_workers': 'int', 'mode': 'str', 'cache': 'bool'},
            'default': {
                'max_workers': None,
                'mode': 'thread',
                'cache': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_api_key': {
            'input': {'api_key': 'str'},
            'default': {'api_key': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'filesize': {
            'input': {'filepath': 'str'},
            'default': {'filepath': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_mnemonic': {
            'input': {'s': 'str'},
            'default': {'s': None},
            'output': 'bool',
            'docs': None,
            'type': 'static'
        },
        'cuda_available': {
            'input': {},
            'default': {},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'unreserve_port': {
            'input': {
                'port': 'int',
                'verbose': 'bool',
                'root': 'bool',
                'var_path': 'str'
            },
            'default': {
                'port': None,
                'var_path': 'reserved_ports',
                'verbose': True,
                'root': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'send': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'transfer_fn_code': {
            'input': {
                'module1': 'str',
                'fn_prefix': 'str',
                'module2': 'str',
                'refresh': 'bool'
            },
            'default': {
                'module1': 'module',
                'fn_prefix': 'ray_',
                'module2': 'ray',
                'refresh': False
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'async_get_json': {
            'input': {
                'path': 'str',
                'default': 'any',
                'root': 'bool',
                'verbose': 'bool'
            },
            'default': {
                'path': None,
                'default': None,
                'root': False,
                'verbose': False,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_api_keys': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'print': {
            'input': {
                'text': 'str',
                'color': 'str',
                'return_text': 'bool',
                'verbose': 'bool',
                'console': 'rich.console.Console'
            },
            'default': {
                'text': None,
                'color': None,
                'return_text': False,
                'verbose': True,
                'console': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'module_class': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'obj_age': {
            'input': {'item': 'dict'},
            'default': {'item': None},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'wallets': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'commit_hash': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'code': {
            'input': {'module': 'NA'},
            'default': {'module': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'filepath': {
            'input': {},
            'default': {},
            'output': 'str',
            'docs': '\n        removes the PWD with respect to where module.py is 
located\n        ',
            'type': 'cls'
        },
        'new_event_loop': {
            'input': {'nest_asyncio': 'bool'},
            'default': {'nest_asyncio': True},
            'output': 'asyncio.AbstractEventLoop',
            'docs': None,
            'type': 'cls'
        },
        'glob': {
            'input': {
                'files_only': 'bool',
                'root': 'bool',
                'recursive': 'bool',
                'path': 'NA'
            },
            'default': {
                'path': None,
                'files_only': True,
                'root': False,
                'recursive': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ip': {
            'input': {'update': 'bool'},
            'default': {'update': False, 'kwargs': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'my_stake': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ls_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'j': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'jload': {
            'input': {'json_string': 'NA'},
            'default': {'json_string': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'name': {
            'input': {'simple': 'bool'},
            'default': {'simple': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_module_dirpath': {
            'input': {'simple': 'bool', 'obj': 'NA'},
            'default': {'obj': None, 'simple': False},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'make_pull': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'classify_fns': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'property_fns': {
            'input': {},
            'default': {},
            'output': 'bool',
            'docs': '\n        Get a list of property functions in a class\n        ',
            'type': 'cls'
        },
        'put_cache': {
            'input': {'k': 'NA', 'v': 'NA'},
            'default': {'k': None, 'v': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'generate_completions': {
            'input': {
                'tokenizer': 'str',
                'mode': 'str',
                'past_tokens': 'int',
                'future_tokens': 'int'
            },
            'default': {
                'past_tokens': 10,
                'future_tokens': 10,
                'tokenizer': 'gpt2',
                'mode': 'lines',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_ray_context': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'is_full_function': {
            'input': {'fn_schema': 'NA'},
            'default': {'fn_schema': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'set_env': {
            'input': {'key': 'str', 'value': 'str'},
            'default': {'key': None, 'value': None},
            'output': 'None',
            'docs': '\n        Pay attention to this function. It sets the environment 
variable\n        ',
            'type': 'cls'
        },
        'process_kwargs': {
            'input': {'kwargs': 'dict', 'fn_schema': 'dict'},
            'default': {'kwargs': None, 'fn_schema': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_port_range': {
            'input': {'port_range': 'list'},
            'default': {'port_range': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_signer': {
            'input': {'data': 'dict'},
            'default': {'data': None},
            'output': 'bool',
            'docs': None,
            'type': 'cls'
        },
        'python2types': {
            'input': {'d': 'dict'},
            'default': {'d': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'get_empty_model': {
            'input': {
                'verbose': 'bool',
                'trust_remote_code': 'bool',
                'init_device': 'str',
                'model': 'NA'
            },
            'default': {
                'model': None,
                'verbose': False,
                'trust_remote_code': True,
                'init_device': 'meta',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'num_tokens': {
            'input': {'text': 'NA'},
            'default': {'text': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'delc': {
            'input': {'k': 'NA', 'password': 'NA'},
            'default': {'k': None, 'password': None},
            'output': {},
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'loop': {
            'input': {
                'remote': 'bool',
                'local': 'bool',
                'save': 'bool',
                'interval': 'int',
                'network': 'NA'
            },
            'default': {
                'interval': 60,
                'network': None,
                'remote': True,
                'local': True,
                'save': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_ssh_key': {
            'input': {'public_key': 'str', 'authorized_keys_file': 'str'},
            'default': {
                'public_key': None,
                'authorized_keys_file': '~/authorized_keys'
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'dict_get': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_fn': {
            'input': {'fn': 'NA', 'init_kwargs': 'NA'},
            'default': {'fn': None, 'init_kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'num_params': {
            'input': {},
            'default': {},
            'output': 'int',
            'docs': None,
            'type': 'self'
        },
        'makedirs': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'kwargs2attributes': {
            'input': {'kwargs': 'dict', 'ignore_error': 'bool'},
            'default': {'kwargs': None, 'ignore_error': False},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'kill_server': {
            'input': {
                'mode': 'str',
                'verbose': 'bool',
                'update': 'bool',
                'prefix_match': 'bool',
                'network': 'str',
                'module': 'NA'
            },
            'default': {
                'module': None,
                'mode': 'pm2',
                'verbose': False,
                'update': True,
                'prefix_match': False,
                'network': 'local',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_float': {
            'input': {'min': 'int', 'max': 'int'},
            'default': {'min': 0, 'max': 1},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_shortcut': {
            'input': {'name': 'str'},
            'default': {'name': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'cache_path': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'up': {'input': {}, 'default': {}, 'output': {}, 'docs': None, 'type': 'cls'},
        'resolve_path': {
            'input': {
                'path': 'str',
                'extension': 'optional[str]',
                'root': 'bool',
                'file_type': 'str'
            },
            'default': {
                'path': None,
                'extension': None,
                'root': False,
                'file_type': 'json'
            },
            'output': {},
            'docs': '\n        Resolves path for saving items that relate to the 
module\n        \n        The path is determined by the module path \n        \n       
',
            'type': 'cls'
        },
        '__init__': {
            'input': {'config': 'dict'},
            'default': {'config': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'run': {
            'input': {'name': 'str', 'verbose': 'bool'},
            'default': {'name': None, 'verbose': False},
            'output': 'any',
            'docs': None,
            'type': 'cls'
        },
        'run_command': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_restart': {
            'input': {'name': 'str', 'verbose': 'bool', 'prefix_match': 'bool'},
            'default': {'name': None, 'verbose': False, 'prefix_match': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'check_used_ports': {
            'input': {'start_port': 'int', 'end_port': 'int', 'timeout': 'int'},
            'default': {'start_port': 8501, 'end_port': 8600, 'timeout': 5},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'update_self': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        Helper function to restart the server\n        ',
            'type': 'self'
        },
        'virtual_actor': {
            'input': {'actor': 'NA'},
            'default': {'actor': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'free_ports': {
            'input': {'reserve': 'bool', 'random_selection': 'bool', 'n': 'int'},
            'default': {
                'n': 10,
                'reserve': False,
                'random_selection': False,
                'kwargs': None
            },
            'output': 'list[int]',
            'docs': None,
            'type': 'cls'
        },
        'has_server': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_network': {
            'input': {'network': 'NA'},
            'default': {'network': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'status': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unreged_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'resolve_password': {
            'input': {'password': 'str'},
            'default': {'password': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'build_proto': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'putc': {
            'input': {'k': 'NA', 'v': 'NA', 'password': 'NA'},
            'default': {'k': None, 'v': None, 'password': None},
            'output': 'munch.Munch',
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'tasks': {
            'input': {'mode': 'str', 'task': 'NA'},
            'default': {'task': None, 'mode': 'pm2', 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'live_keys': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'dps': {
            'input': {'sudo': 'bool'},
            'default': {'sudo': True},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'copy': {
            'input': {'data': 'any'},
            'default': {'data': None},
            'output': 'any',
            'docs': None,
            'type': 'cls'
        },
        'pool': {
            'input': {'n': 'int'},
            'default': {'n': 5, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'networth': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gc': {'input': {}, 'default': {}, 'output': {}, 'docs': None, 'type': 'cls'},
        'key2stats': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_many': {
            'input': {
                'default': 'any',
                'mode': 'str',
                'max_age': 'str',
                'cache': 'bool',
                'full': 'bool'
            },
            'default': {
                'k': None,
                'default': None,
                'mode': 'json',
                'max_age': None,
                'cache': False,
                'full': False,
                'kwargs': None
            },
            'output': 'any',
            'docs': '\n        Puts a value in sthe config, with the option to encrypt 
it\n\n        Return the value\n        ',
            'type': 'cls'
        },
        'rm_user': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'root_keys': {
            'input': {'address': 'bool', 'search': 'str'},
            'default': {'search': 'module', 'address': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'num_roles': {
            'input': {'role': 'str'},
            'default': {'role': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_class': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': '\n        is the object a class\n        ',
            'type': 'static'
        },
        'ports': {
            'input': {'ip': 'str'},
            'default': {'ip': '0.0.0.0'},
            'output': 'list[int]',
            'docs': None,
            'type': 'cls'
        },
        'merge_config': {
            'input': {'config': 'dict', 'overrite_keys': 'bool'},
            'default': {'config': None, 'overrite_keys': False},
            'output': 'dict',
            'docs': '\n        Merges the config with the current config\n        ',
            'type': 'self'
        },
        'get': {
            'input': {
                'k': 'str',
                'default': 'any',
                'mode': 'str',
                'max_age': 'str',
                'cache': 'bool',
                'full': 'bool',
                'key': 'Key'
            },
            'default': {
                'k': None,
                'default': None,
                'mode': 'json',
                'max_age': None,
                'cache': False,
                'full': False,
                'key': None,
                'kwargs': None
            },
            'output': 'any',
            'docs': '\n        Puts a value in sthe config, with the option to encrypt 
it\n\n        Return the value\n        ',
            'type': 'cls'
        },
        'unlock_file': {
            'input': {'f': 'NA'},
            'default': {'f': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'm': {
            'input': {'module': 'any'},
            'default': {'module': 'module', 'kwargs': None},
            'output': {},
            'docs': '\n        Wraps a python class as a module\n        ',
            'type': 'cls'
        },
        'ray_stop': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'snap': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'randcolour': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'subnet': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'stats': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_registered': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'unstake': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'put': {
            'input': {
                'mode': 'bool',
                'key': 'str',
                'encrypt': 'bool',
                'k': 'NA',
                'v': 'NA'
            },
            'default': {
                'k': None,
                'v': None,
                'mode': 'json',
                'key': None,
                'encrypt': False
            },
            'output': {},
            'docs': '\n        Puts a value in the config\n        ',
            'type': 'cls'
        },
        'kill_many': {
            'input': {
                'search': 'str',
                'network': 'str',
                'parallel': 'bool',
                'timeout': 'int',
                'n': 'NA'
            },
            'default': {
                'search': None,
                'network': 'local',
                'parallel': True,
                'timeout': 10,
                'n': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'set_event_loop': {
            'input': {'new_loop': 'bool', 'loop': 'NA'},
            'default': {'loop': None, 'new_loop': False},
            'output': 'asyncio.AbstractEventLoop',
            'docs': None,
            'type': 'self'
        },
        'upgrade': {
            'input': {'lib': 'NA'},
            'default': {'lib': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'transfer': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'log': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn_defaults': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': '\n        Gets the function defaults\n        ',
            'type': 'cls'
        },
        'seconds_per_epoch': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'get_mem': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_number': {
            'input': {'value': 'NA'},
            'default': {'value': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'kill': {
            'input': {
                'mode': 'str',
                'verbose': 'bool',
                'update': 'bool',
                'prefix_match': 'bool',
                'network': 'str',
                'module': 'NA'
            },
            'default': {
                'module': None,
                'mode': 'pm2',
                'verbose': False,
                'update': True,
                'prefix_match': False,
                'network': 'local',
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'miner': {
            'input': {
                'wallet': 'str',
                'miner': 'str',
                'port': 'int',
                'network': 'str',
                'netuid': 'int',
                'api_key': 'NA'
            },
            'default': {
                'api_key': None,
                'wallet': 'ensemble.vali',
                'miner': 
'~/commune/bittensor/neurons/text/prompting/miners/openai/neuron.py',
                'port': 2012,
                'network': 'finney',
                'netuid': 1,
                'args': None,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'shortcut2model': {
            'input': {'shortcut': 'str'},
            'default': {'shortcut': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ssh_authorized_keys': {
            'input': {'authorized_keys_file': 'str'},
            'default': {'authorized_keys_file': '~/.ssh/authorized_keys'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ensure_package': {
            'input': {'lib': 'str', 'verbose': 'bool'},
            'default': {'lib': None, 'verbose': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'rm_admin': {
            'input': {'address': 'NA'},
            'default': {'address': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'path2objectpath': {
            'input': {'path': 'str', 'search': 'list'},
            'default': {'path': None, 'search': ['c.Module']},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'fns': {
            'input': {'search': 'str', 'include_parents': 'bool'},
            'default': {'search': None, 'include_parents': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'killpre': {
            'input': {'prefix': 'str'},
            'default': {'prefix': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'subnet_params': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'nest_asyncio': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'gpu_map': {
            'input': {'device': 'int', 'fmt': 'str'},
            'default': {'device': None, 'fmt': 'gb'},
            'output': 'dict[int, typing',
            'docs': None,
            'type': 'cls'
        },
        'kill_fleet': {
            'input': {'network': 'str', 'tag': 'NA'},
            'default': {'tag': None, 'network': 'local', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'model_max_gpu_memory': {
            'input': {'model': 'NA'},
            'default': {'model': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'key2value': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'has_function_arg': {
            'input': {'arg': 'str', 'fn': 'NA'},
            'default': {'fn': None, 'arg': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'timeit': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'pythonpath': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        removes the PWD with respect to where module.py is 
located\n        ',
            'type': 'cls'
        },
        'async_put_json': {
            'input': {
                'path': 'str',
                'data': 'dict',
                'root': 'bool',
                'cache': 'bool',
                'meta': 'NA'
            },
            'default': {
                'path': None,
                'data': None,
                'meta': None,
                'root': False,
                'cache': False,
                'kwargs': None
            },
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'ray_start': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        Start the ray cluster \n        (TODO: currently 
supports head)\n        ',
            'type': 'cls'
        },
        'df': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'lib2version': {
            'input': {'lib': 'str'},
            'default': {'lib': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'get_num_params': {
            'input': {'model': 'nn.Module'},
            'default': {'model': None},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'queue': {
            'input': {'size': 'str', 'mode': 'str'},
            'default': {'size': -1, 'args': None, 'mode': 'queue', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'getc': {
            'input': {'key': 'NA', 'default': 'NA', 'password': 'NA'},
            'default': {'key': None, 'default': None, 'password': None},
            'output': 'any',
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'get_age': {
            'input': {'timestamp': 'int'},
            'default': {'timestamp': 0},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'readd_servers': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'verify_idcard': {
            'input': {'idcard': 'str'},
            'default': {'idcard': None},
            'output': 'bool',
            'docs': None,
            'type': 'self'
        },
        'serve_module': {
            'input': {
                'module': 'any',
                'tag': 'str',
                'port': 'int',
                'server_name': 'str',
                'kwargs': 'dict',
                'refresh': 'bool',
                'wait_for_server': 'bool',
                'remote': 'bool',
                'server_mode': 'str',
                'tag_seperator': 'str',
                'update': 'bool',
                'max_workers': 'int',
                'mode': 'str',
                'public': 'bool',
                'verbose': 'bool',
                'network': 'str'
            },
            'default': {
                'module': None,
                'tag': None,
                'network': 'local',
                'port': None,
                'server_name': None,
                'kwargs': None,
                'refresh': True,
                'wait_for_server': False,
                'remote': True,
                'server_mode': 'http',
                'tag_seperator': '::',
                'update': False,
                'max_workers': None,
                'mode': 'thread',
                'public': False,
                'verbose': False,
                'extra_kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_server_info': {
            'input': {'name': 'str'},
            'default': {'name': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'random_peer_address': {
            'input': {'network': 'str', 'tag': 'NA'},
            'default': {'network': 'local', 'tag': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_list': {
            'input': {'verbose': 'bool', 'search': 'NA'},
            'default': {'search': None, 'verbose': False},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'sand': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_server_name': {
            'input': {'name': 'str', 'tag': 'str', 'seperator': 'str'},
            'default': {'name': None, 'tag': None, 'seperator': '.'},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'virtual_client': {
            'input': {'module': 'NA'},
            'default': {'module': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'replicas': {
            'input': {'network': 'str'},
            'default': {'network': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'ss58_encode': {
            'input': {'data': 'union[str, bytes]', 'ss58_format': 'int'},
            'default': {'data': None, 'ss58_format': 42, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'argv': {
            'input': {'include_script': 'bool'},
            'default': {'include_script': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'sizeof': {
            'input': {'obj': 'NA'},
            'default': {'obj': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'restart_self': {
            'input': {},
            'default': {},
            'output': {},
            'docs': '\n        Helper function to restart the server\n        ',
            'type': 'self'
        },
        'cfg': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'save_config': {
            'input': {'config': 'union[munch', 'path': 'str'},
            'default': {'config': None, 'path': None},
            'output': 'munch.Munch',
            'docs': '\n        Saves the config to a yaml file\n        ',
            'type': 'cls'
        },
        'set_shortcut': {
            'input': {'shortcut': 'str', 'kwargs': 'dict'},
            'default': {'shortcut': None, 'kwargs': None},
            'output': 'dict',
            'docs': None,
            'type': 'cls'
        },
        'async_call': {
            'input': {
                'module': 'str',
                'fn': 'str',
                'timeout': 'int',
                'prefix_match': 'bool',
                'network': 'str',
                'key': 'str',
                'ignore_error': 'bool'
            },
            'default': {
                'module': None,
                'fn': 'info',
                'args': None,
                'timeout': 10,
                'prefix_match': False,
                'network': None,
                'key': None,
                'ignore_error': False,
                'kwargs': None,
                'extra_kwargs': None
            },
            'output': 'None',
            'docs': None,
            'type': 'cls'
        },
        'fix_proto': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_available_ports': {
            'input': {'port_range': 'list[int]', 'ip': 'str'},
            'default': {'port_range': None, 'ip': None},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'warning': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'random_word': {
            'input': {'n': 'int', 'seperator': 'str'},
            'default': {'args': None, 'n': 1, 'seperator': '_', 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'stake_multiple': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'is_imported': {
            'input': {'package': 'str'},
            'default': {'package': None},
            'output': {},
            'docs': None,
            'type': 'static'
        },
        'rcmd': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'k2a': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_function_annotations': {
            'input': {'fn': 'NA'},
            'default': {'fn': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'ray_init': {
            'input': {'init_kwargs': 'dict'},
            'default': {'init_kwargs': {}},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pull': {
            'input': {'stash': 'bool', 'cwd': 'NA'},
            'default': {'stash': False, 'cwd': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'mcap': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'add_args': {
            'input': {
                'config': 'dict',
                'prefix': 'str',
                'parser': 'argparse.ArgumentParser'
            },
            'default': {'config': None, 'prefix': None, 'parser': None},
            'output': {},
            'docs': '\n        Adds arguments to the parser based on the config. This 
invol\n        ',
            'type': 'cls'
        },
        'ip_version': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'fn2str': {
            'input': {'code': 'bool', 'defaults': 'bool', 'search': 'NA'},
            'default': {
                'search': None,
                'code': True,
                'defaults': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'exists_json': {
            'input': {'path': 'str', 'root': 'bool'},
            'default': {'path': None, 'root': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'build': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'load_key': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'self_vote_pool': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_fn': {
            'input': {
                'fn': 'str',
                'ignore_module_pattern': 'bool',
                'seperator': 'str'
            },
            'default': {'fn': None, 'seperator': '.', 'ignore_module_pattern': False},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_object': {
            'input': {'key': 'str', 'verbose': 'bool'},
            'default': {'key': None, 'verbose': False},
            'output': {},
            'docs': '\n        \n        Import an object from a string with the format
of {module_path}.{object}\n        Examples: import_object("torch.nn"): imports nn from
torch\n        \n        ',
            'type': 'cls'
        },
        'model_size': {
            'input': {
                'model': 'nn.Module',
                'model_inflation_ratio': 'float',
                'keys': 'list[str]',
                'fmt': 'str'
            },
            'default': {
                'model': None,
                'model_inflation_ratio': 1.0,
                'fmt': 'b',
                'keys': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'regfleet': {
            'input': {
                'tag': 'str',
                'n': 'int',
                'multithread': 'bool',
                'timeout': 'int',
                'module': 'NA',
                'stake': 'NA'
            },
            'default': {
                'module': None,
                'tag': None,
                'n': 2,
                'timeout': 40,
                'stake': None,
                'multithread': True,
                'kwargs': None
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'get_schema': {
            'input': {
                'code': 'bool',
                'docs': 'bool',
                'include_parents': 'bool',
                'defaults': 'bool',
                'search': 'NA',
                'module': 'NA'
            },
            'default': {
                'search': None,
                'module': None,
                'code': False,
                'docs': True,
                'include_parents': False,
                'defaults': True
            },
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'total_gpu_memory': {
            'input': {},
            'default': {},
            'output': 'int',
            'docs': None,
            'type': 'cls'
        },
        'dummy_gen': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'pm2_kill_many': {
            'input': {'verbose': 'bool', 'timeout': 'int', 'search': 'NA'},
            'default': {'search': None, 'verbose': True, 'timeout': 10},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'getnet': {
            'input': {},
            'default': {},
            'output': {},
            'docs': None,
            'type': 'self'
        },
        'bytes2dict': {
            'input': {'data': 'bytes'},
            'default': {'data': None},
            'output': 'str',
            'docs': None,
            'type': 'cls'
        },
        'partial': {
            'input': {'fn': 'NA'},
            'default': {'fn': None, 'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'upnpc_create_port_map': {
            'input': {'port': 'int'},
            'default': {'port': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        },
        'networks': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': 'list[str]',
            'docs': None,
            'type': 'cls'
        },
        'address2name': {
            'input': {},
            'default': {'args': None, 'kwargs': None},
            'output': {},
            'docs': None,
            'type': 'cls'
        }
    }
}
